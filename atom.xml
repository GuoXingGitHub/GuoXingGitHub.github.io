<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿兴的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://axss.gitee.io/"/>
  <updated>2018-03-14T13:12:03.823Z</updated>
  <id>http://axss.gitee.io/</id>
  
  <author>
    <name>AX Blog</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VS插件VASSISTX(小番茄)创建注释模板</title>
    <link href="http://axss.gitee.io/2018/03/14/%E6%8A%80%E6%9C%AF/2018-03-14-VS%E6%8F%92%E4%BB%B6VASSISTX(%E5%B0%8F%E7%95%AA%E8%8C%84)%E5%88%9B%E5%BB%BA%E6%B3%A8%E9%87%8A%E6%A8%A1%E6%9D%BF/"/>
    <id>http://axss.gitee.io/2018/03/14/技术/2018-03-14-VS插件VASSISTX(小番茄)创建注释模板/</id>
    <published>2018-03-14T07:00:42.000Z</published>
    <updated>2018-03-14T13:12:03.823Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>VASSISTX是vs的一款插件,可以大大提高程序的开发效率,VASSISTX的安装和破解可以自己百度,这里主要讲的是使用它的快速生成模板的功能</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>安装好VASSISTX后选择操作栏上的VASSISTX然后打开Visual Assist Options 选择Suggestions 再选择Edit VA Snippets 就能看到下图界面<br><img src="/2018/03/14/技术/2018-03-14-VS插件VASSISTX(小番茄)创建注释模板/1.jpg" alt="Edit VA Snippets"><br>我们需要new一个然后可以选择一个下方现有的模板复制到我们新增的模板里,可以按照自己的要求修改<br><img src="/2018/03/14/技术/2018-03-14-VS插件VASSISTX(小番茄)创建注释模板/2.jpg" alt="Edit VA Snippets"><br>最后输入Title和Shortcut，这个Shortcut是我们在启动命令(在vs界面输入的时候VASSISTX自动会检测,检测到我们只需选择后按tab或者enter建即可显示我们需要追加的模板)</p><h2 id="常用注释格式"><a href="#常用注释格式" class="headerlink" title="常用注释格式"></a>常用注释格式</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、生成文件头注释  </span></span><br><span class="line"><span class="comment">/************************************************************************** </span></span><br><span class="line"><span class="comment">    *  @Copyright (c) $YEAR$, AX, All rights reserved. </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    *  @file     : $FILE_BASE$.$FILE_EXT$ </span></span><br><span class="line"><span class="comment">    *  @version  : ver 1.0 </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    *  @author   : AX </span></span><br><span class="line"><span class="comment">    *  @date     : $YEAR$/$MONTH_02$/$DAY_02$ $HOUR_02$:$MINUTE$ </span></span><br><span class="line"><span class="comment">    *  @brief    : $brief$ </span></span><br><span class="line"><span class="comment">**************************************************************************/</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//2、生成函数功能注释  </span></span><br><span class="line"><span class="comment">/******************************************************** </span></span><br><span class="line"><span class="comment">    *  @function :  </span></span><br><span class="line"><span class="comment">    *  @brief    :  $brief$ </span></span><br><span class="line"><span class="comment">    *  @input    : </span></span><br><span class="line"><span class="comment">    *  @output   : </span></span><br><span class="line"><span class="comment">    *  @return   :  成功返回0，失败返回非0 </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    *  @author   :  AX  $YEAR$/$MONTH_02$/$DAY_02$ $HOUR_02$:$MINUTE$ </span></span><br><span class="line"><span class="comment">********************************************************/</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//3、生成类</span></span><br><span class="line"><span class="comment">//2、生成函数功能注释  </span></span><br><span class="line"><span class="comment">/******************************************************** </span></span><br><span class="line"><span class="comment">    *  @class :  </span></span><br><span class="line"><span class="comment">    *  @brief    :  $brief$ </span></span><br><span class="line"><span class="comment">    *  @author   :  AX  $YEAR$/$MONTH_02$/$DAY_02$ $HOUR_02$:$MINUTE$ </span></span><br><span class="line"><span class="comment">********************************************************/</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//4、生成单行标记  </span></span><br><span class="line"><span class="comment">//-------By_AX_$YEAR$/$MONTH_02$/$DAY_02$ $HOUR_02$:$MINUTE$  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//5、生成多行标记  </span></span><br><span class="line"><span class="comment">/*-----------------By_AX_$YEAR$/$MONTH_02$/$DAY_02$ $HOUR_02$:$MINUTE$-----------------*/</span>  </span><br><span class="line"><span class="comment">/*------------------------------------------------------------*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;VASSISTX是vs的一款插件,可以大大提高程序的开发效率,VASSISTX的安装和破解可以自己百度,这里主要讲的是使用它的快速生成模板的
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="c语言" scheme="http://axss.gitee.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="工具/插件" scheme="http://axss.gitee.io/tags/%E5%B7%A5%E5%85%B7-%E6%8F%92%E4%BB%B6/"/>
    
      <category term="c++" scheme="http://axss.gitee.io/tags/c/"/>
    
      <category term="csharp" scheme="http://axss.gitee.io/tags/csharp/"/>
    
      <category term="python" scheme="http://axss.gitee.io/tags/python/"/>
    
      <category term=".net" scheme="http://axss.gitee.io/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>python编写规范pep8的问题笔记</title>
    <link href="http://axss.gitee.io/2018/03/12/%E6%8A%80%E6%9C%AF/2018-03-09-python%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83pep8%E7%9A%84%E9%97%AE%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <id>http://axss.gitee.io/2018/03/12/技术/2018-03-09-python编写规范pep8的问题笔记/</id>
    <published>2018-03-12T12:46:25.000Z</published>
    <updated>2018-03-13T02:58:44.820Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字数-函数限制"><a href="#字数-函数限制" class="headerlink" title="字数,函数限制"></a>字数,函数限制</h3><p>一行列数: PEP 8 规定为 79 列，这个太苛刻了，如果要拼接url一般都会超。<br>一个函数: 不要超过 30 行代码, 即可显示在一个屏幕类，可以不使用垂直游标即可看到整个函数。<br>一个类: 不要超过 200 行代码，不要有超过 10 个方法。<br>一个模块: 不要超过 500 行。</p><h3 id="不要在一句import中多个库"><a href="#不要在一句import中多个库" class="headerlink" title="不要在一句import中多个库"></a>不要在一句import中多个库</h3><p>不推荐:import os, sys<br>推荐:<br>import os<br>import sys</p><h3 id="错误记录"><a href="#错误记录" class="headerlink" title="错误记录"></a>错误记录</h3><p>错误记录: W292 no newline at end of file<br>处理:打个回车有新的一空行即可（新行不要有空格</p><p>错误记录:E302 expected 2 blank lines, found 1<br>处理:上面只有一行空白，但是需要两个空白行</p><p>错误记录:E231 missing whitespace after ‘,’<br>翻译:“，”后要有空格<br>举例:<br>错误 print(“%s %s %s %s %s %s” % (A,B,D,E,K,L))<br>正确 print(“%s %s %s %s %s %s” % (A, B, D, E, K, L))</p><p>错误记录:E225 missing whitespace around operator<br>翻译:<br>举例:<br>错误 print(“%s %s %s %s %s %s”%(A, B, D, E, K, L))<br>正确 rint(“%s %s %s %s %s %s”% (A, B, D, E, K, L))</p><p>错误记录:E225 missing whitespace around operator<br>举例:<br>错误 f=open(“D:\test.txt”, “ab”)<br>正确 f = open(“D:\test.txt”, “ab”)</p><hr><blockquote><p>本文引用自：<a href="http://www.simonzhang.net/?p=1072" target="_blank" rel="noopener">http://www.simonzhang.net/?p=1072</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;字数-函数限制&quot;&gt;&lt;a href=&quot;#字数-函数限制&quot; class=&quot;headerlink&quot; title=&quot;字数,函数限制&quot;&gt;&lt;/a&gt;字数,函数限制&lt;/h3&gt;&lt;p&gt;一行列数: PEP 8 规定为 79 列，这个太苛刻了，如果要拼接url一般都会超。&lt;br&gt;一个函数
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="python" scheme="http://axss.gitee.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>图片</title>
    <link href="http://axss.gitee.io/2018/03/12/%E7%94%9F%E6%B4%BB/2018-03-10-%E5%9B%BE%E7%89%87/"/>
    <id>http://axss.gitee.io/2018/03/12/生活/2018-03-10-图片/</id>
    <published>2018-03-12T08:40:41.000Z</published>
    <updated>2018-03-13T02:58:44.844Z</updated>
    
    <content type="html"><![CDATA[<figure><br>    <img src="/2018/03/12/生活/2018-03-10-图片/1.png"><br></figure> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure&gt;&lt;br&gt;    &lt;img src=&quot;/2018/03/12/生活/2018-03-10-图片/1.png&quot;&gt;&lt;br&gt;&lt;/figure&gt; 
      
    
    </summary>
    
      <category term="生活" scheme="http://axss.gitee.io/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活随笔" scheme="http://axss.gitee.io/tags/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>C#学习笔记.exe下载</title>
    <link href="http://axss.gitee.io/2018/03/12/%E6%8A%80%E6%9C%AF/2018-03-10-csharp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://axss.gitee.io/2018/03/12/技术/2018-03-10-csharp学习笔记/</id>
    <published>2018-03-12T07:09:23.000Z</published>
    <updated>2018-03-13T02:58:44.828Z</updated>
    
    <content type="html"><![CDATA[<p><a href="csharp学习笔记.exe">点击下载 C#学习笔记.exe</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;csharp学习笔记.exe&quot;&gt;点击下载 C#学习笔记.exe&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工具/插件" scheme="http://axss.gitee.io/tags/%E5%B7%A5%E5%85%B7-%E6%8F%92%E4%BB%B6/"/>
    
      <category term="csharp" scheme="http://axss.gitee.io/tags/csharp/"/>
    
  </entry>
  
  <entry>
    <title>C#代码的编译过程</title>
    <link href="http://axss.gitee.io/2018/03/12/%E6%8A%80%E6%9C%AF/2018-03-10-csharp%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B/"/>
    <id>http://axss.gitee.io/2018/03/12/技术/2018-03-10-csharp代码的编译过程/</id>
    <published>2018-03-12T07:04:49.000Z</published>
    <updated>2018-03-13T02:58:44.827Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/12/技术/2018-03-10-csharp代码的编译过程/csharp代码的编译过程.png" alt="csharp代码的编译过程"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/03/12/技术/2018-03-10-csharp代码的编译过程/csharp代码的编译过程.png&quot; alt=&quot;csharp代码的编译过程&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="csharp" scheme="http://axss.gitee.io/tags/csharp/"/>
    
  </entry>
  
  <entry>
    <title>vscode配置c,c++环境</title>
    <link href="http://axss.gitee.io/2018/03/12/%E6%8A%80%E6%9C%AF/2018-03-14-vscode%E9%85%8D%E7%BD%AEc,c++%E7%8E%AF%E5%A2%83/"/>
    <id>http://axss.gitee.io/2018/03/12/技术/2018-03-14-vscode配置c,c++环境/</id>
    <published>2018-03-12T07:00:42.000Z</published>
    <updated>2018-03-14T13:03:56.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>官网教程: <a href="https://code.visualstudio.com/docs/languages/cpp" target="_blank" rel="noopener">C/C++ for VS Code (Preview)</a></li><li>参考教程: <a href="https://www.zhihu.com/question/30315894" target="_blank" rel="noopener">Visual Studio Code如何编写运行C、C++</a></li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="ide和编译器-调试器的安装"><a href="#ide和编译器-调试器的安装" class="headerlink" title="ide和编译器,调试器的安装"></a>ide和编译器,调试器的安装</h3><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vscode官网</a><br><a href="http://releases.llvm.org/download.html" target="_blank" rel="noopener">Clang下载</a>,选Pre-Built Binaries中的Clang for Windows (64-bit),不需要下.sig文件<br><a href="https://sourceforge.net/projects/mingw-w64/" target="_blank" rel="noopener">MinGW-w64下载</a>,直接Download</p><p>Clang 下载好了以后安装。添加环境变量时：选Add LLVM to the system PATH for all users（即第二项，不过第三项也差不多）。Clang的安装路径（Destination folder）我推荐填C:\LLVM，不装那里也行，下面的配置里路径就自己改。安装完了以后可能会弹出cmd说MSVC integration install failed。这个是因为Clang默认使用的是msvc的工具链，而我们选择的工具链是MinGW，所以就不用管这个提示。如果你想用别的工具链，参考第九点。</p><p>MinGW随便装哪，Architecture选x86_64，装好以后把东西全部复制到Clang的文件夹里去，他们会无冲突合并，效果图见下。同样，不做这一步也行，下面的配置里路径就自己改，还要手动把MinGW的bin文件夹加到path中，因为MinGW不会自己加。至于为什么既要装Clang又要装MinGW，是因为Clang没有头文件。然后就可以把MinGW删了（Uninstall.exe）。不建议安装多个MinGW；可以把其他轻量IDE的编译器设为Clang，并把其他的MinGW从环境变量中去掉。</p><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>C/C++（就是有些教程里的cpptools）<br>C/C++ Clang Command Adapter：提供静态检测（Lint）<br>Code Runner<br>Include Autocomplete：提供头文件补全<br>C/C++ Snippets：Snippets即重用代码块</p><h3 id="可选插件"><a href="#可选插件" class="headerlink" title="可选插件"></a>可选插件</h3><p>Bracket Pair Colorizer：彩虹花括号<br>One Dark Pro：大概是VS Code安装量最高的主题<br>GBKtoUTF8：把GBK编码的文档转换成UTF8编码的</p><h2 id="配置-vscode-的-四个json文件"><a href="#配置-vscode-的-四个json文件" class="headerlink" title="配置.vscode 的 四个json文件"></a>配置.vscode 的 四个json文件</h2><h3 id="c-cpp-properties-json"><a href="#c-cpp-properties-json" class="headerlink" title="c_cpp_properties.json"></a>c_cpp_properties.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Win32"</span>,</span><br><span class="line">            <span class="attr">"intelliSenseMode"</span>: <span class="string">"clang-x64"</span>,</span><br><span class="line">            <span class="attr">"includePath"</span>: [</span><br><span class="line">                <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">                <span class="string">"D:/Program Files/llvm/lib/gcc/x86_64-w64-mingw32/7.2.0/include/c++"</span>,</span><br><span class="line">                <span class="string">"D:/Program Files/llvm/lib/gcc/x86_64-w64-mingw32/7.2.0/include/c++/x86_64-w64-mingw32"</span>,</span><br><span class="line">                <span class="string">"D:/Program Files/llvm/lib/gcc/x86_64-w64-mingw32/7.2.0/include/c++/backward"</span>,</span><br><span class="line">                <span class="string">"D:/Program Files/llvm/lib/gcc/x86_64-w64-mingw32/7.2.0/include"</span>,</span><br><span class="line">                <span class="string">"D:/Program Files/llvm/include"</span>,</span><br><span class="line">                <span class="string">"D:/Program Files/llvm/x86_64-w64-mingw32/include"</span>,</span><br><span class="line">                <span class="string">"D:/Program Files/llvm/lib/gcc/x86_64-w64-mingw32/7.2.0/include-fixed"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"defines"</span>: [</span><br><span class="line">                <span class="string">"_DEBUG"</span>,</span><br><span class="line">                <span class="string">"UNICODE"</span>,</span><br><span class="line">                <span class="string">"__GNUC__=7"</span>,</span><br><span class="line">                <span class="string">"__cdecl=__attribute__((__cdecl__))"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"browse"</span>: &#123;</span><br><span class="line">                <span class="attr">"path"</span>: [</span><br><span class="line">                    <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">                    <span class="string">"D:/Program Files/llvm/lib/gcc/x86_64-w64-mingw32/7.2.0/include/c++"</span>,</span><br><span class="line">                    <span class="string">"D:/Program Files/llvm/lib/gcc/x86_64-w64-mingw32/7.2.0/include/c++/x86_64-w64-mingw32"</span>,</span><br><span class="line">                    <span class="string">"D:/Program Files/llvm/lib/gcc/x86_64-w64-mingw32/7.2.0/include/c++/backward"</span>,</span><br><span class="line">                    <span class="string">"D:/Program Files/llvm/lib/gcc/x86_64-w64-mingw32/7.2.0/include"</span>,</span><br><span class="line">                    <span class="string">"D:/Program Files/llvm/include"</span>,</span><br><span class="line">                    <span class="string">"D:/Program Files/llvm/x86_64-w64-mingw32/include"</span>,</span><br><span class="line">                    <span class="string">"D:/Program Files/llvm/lib/gcc/x86_64-w64-mingw32/7.2.0/include-fixed"</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">"limitSymbolsToIncludedHeaders"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"databaseFilename"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体路径改成自己的clang的安装路径</p><h3 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// https://github.com/Microsoft/vscode-cpptools/blob/master/launch.md</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            "name": "(gdb) Launch", // 配置名称，将会在启动配置的下拉菜单中显示</span><br><span class="line">            "type": "cppdbg", // 配置类型，这里只能为cppdbg</span><br><span class="line">            "request": "launch", // 请求配置类型，可以为launch（启动）或attach（附加）</span><br><span class="line">            "program": "$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe", // 将要进行调试的程序的路径</span><br><span class="line">            "args": [], // 程序调试时传递给程序的命令行参数，一般设为空即可</span><br><span class="line">            "stopAtEntry": true, // 设为true时程序将暂停在程序入口处，我一般设置为true</span><br><span class="line">            "cwd": "$&#123;workspaceFolder&#125;", // 调试程序时的工作目录</span><br><span class="line">            "environment": [], // （环境变量？）</span><br><span class="line">            "externalConsole": true, // 调试时是否显示控制台窗口，一般设置为true显示控制台</span><br><span class="line">            "internalConsoleOptions": "neverOpen", // 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？</span><br><span class="line">            "MIMode": "gdb", // 指定连接的调试器，可以为gdb或lldb。但目前lldb在windows下没有预编译好的版本。</span><br><span class="line">            "miDebuggerPath": "gdb.exe", // 调试器路径。</span><br><span class="line">            "setupCommands": [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            "preLaunchTask": "Compile" // 调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">// https://github.com/Microsoft/vscode-cpptools/blob/master/launch.md</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            "name": "(gdb) Launch", // 配置名称，将会在启动配置的下拉菜单中显示</span><br><span class="line">            "type": "cppdbg", // 配置类型，这里只能为cppdbg</span><br><span class="line">            "request": "launch", // 请求配置类型，可以为launch（启动）或attach（附加）</span><br><span class="line">            "program": "$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe", // 将要进行调试的程序的路径</span><br><span class="line">            "args": [], // 程序调试时传递给程序的命令行参数，一般设为空即可</span><br><span class="line">            "stopAtEntry": true, // 设为true时程序将暂停在程序入口处，我一般设置为true</span><br><span class="line">            "cwd": "$&#123;workspaceFolder&#125;", // 调试程序时的工作目录</span><br><span class="line">            "environment": [], // （环境变量？）</span><br><span class="line">            "externalConsole": true, // 调试时是否显示控制台窗口，一般设置为true显示控制台</span><br><span class="line">            "internalConsoleOptions": "neverOpen", // 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？</span><br><span class="line">            "MIMode": "gdb", // 指定连接的调试器，可以为gdb或lldb。但目前lldb在windows下没有预编译好的版本。</span><br><span class="line">            "miDebuggerPath": "gdb.exe", // 调试器路径。</span><br><span class="line">            "setupCommands": [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            "preLaunchTask": "Compile" // 调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他设置-seting"><a href="#其他设置-seting" class="headerlink" title="其他设置 seting"></a>其他设置 seting</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">"editor.fontFamily": "Consolas, 微软雅黑", // 控制编辑器字体</span><br><span class="line">"workbench.colorTheme": "One Dark Pro", // 主题</span><br><span class="line">"files.trimTrailingWhitespace": true, // 保存时，删除每一行末尾的空格</span><br><span class="line">"workbench.colorCustomizations": &#123;</span><br><span class="line">        "activityBar.foreground": "#33ff66" // 自定义颜色</span><br><span class="line">    &#125;,</span><br><span class="line">"git.enabled": false, // 如果你不用git，我建议你关闭它</span><br><span class="line">"editor.minimap.enabled": false, // 我个人不用minimap，就是右边那个东西</span><br><span class="line">"editor.dragAndDrop": false, // 选中文字后，可以拖动它们调整位置。我是不需要</span><br><span class="line">"files.autoGuessEncoding": true // 启用后，会在打开文件时尝试猜测字符集编码</span><br></pre></td></tr></table></figure><hr><blockquote><p>详情请参考 <a href="https://www.zhihu.com/question/30315894" target="_blank" rel="noopener">https://www.zhihu.com/question/30315894</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;官网教程: &lt;a href=&quot;https://code.visualstudio.com/docs/languages/cpp&quot;
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="c语言" scheme="http://axss.gitee.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="工具/插件" scheme="http://axss.gitee.io/tags/%E5%B7%A5%E5%85%B7-%E6%8F%92%E4%BB%B6/"/>
    
      <category term="c++" scheme="http://axss.gitee.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>最全的前端资源教程</title>
    <link href="http://axss.gitee.io/2018/03/12/%E6%8A%80%E6%9C%AF/2018-03-10-%E6%9C%80%E5%85%A8%E7%9A%84%E5%89%8D%E7%AB%AF%E8%B5%84%E6%BA%90%E6%95%99%E7%A8%8B/"/>
    <id>http://axss.gitee.io/2018/03/12/技术/2018-03-10-最全的前端资源教程/</id>
    <published>2018-03-12T07:00:42.000Z</published>
    <updated>2018-03-14T13:03:52.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><table><thead><tr><th>Article</th><th>Article</th></tr></thead><tbody><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/57" target="_blank" rel="noopener">Javascript深浅拷贝</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/56" target="_blank" rel="noopener">Javascript中的apply和call继承</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/55" target="_blank" rel="noopener">Javascript的jsonp原理</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/49" target="_blank" rel="noopener">Javascript监听触摸事件</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/52" target="_blank" rel="noopener">Javascript中的var self = this</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/32" target="_blank" rel="noopener">Javascript面向对象编程</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/14" target="_blank" rel="noopener">Javascript滑屏切换场景</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/16" target="_blank" rel="noopener">Javascript获取经纬度，关于调用百度API的问题</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/3" target="_blank" rel="noopener">妙用Javascript运算符</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/1" target="_blank" rel="noopener">深入理解Javascript函数编程</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/4" target="_blank" rel="noopener">Javascript的setTimeout详细用例</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/42" target="_blank" rel="noopener">sessionstorage，localstorage和cookie</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/11" target="_blank" rel="noopener">JS日期对比</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/10" target="_blank" rel="noopener">JSONP参考文章</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/createElement.html" target="_blank" rel="noopener">Javascript的createElement</a></td><td><a href="https://wscats.github.io/angular-demo/createDocumentFragment.html" target="_blank" rel="noopener">Javascript的createDocumentFragment</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/sessionStoragelocalStorage.html" target="_blank" rel="noopener">sessionStorage和localStorage</a></td><td><a href="https://wscats.github.io/angular-demo/像素动画.html" target="_blank" rel="noopener">像素帧动画</a></td></tr><tr><td><strong>Reference</strong></td><td><strong>Reference</strong></td></tr><tr><td><a href="https://github.com/windiest/Front-end-tutorial" target="_blank" rel="noopener">收集最全前端学习资料</a></td><td><a href="https://github.com/Wscats/Good-text-Share" target="_blank" rel="noopener">最全前端教程-猫的回忆录</a></td></tr><tr><td><a href="https://segmentfault.com/a/1190000002640298" target="_blank" rel="noopener">JavaScript中的this陷阱的最全收集–没有之一</a></td><td><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch1.html" target="_blank" rel="noopener">JS函数式编程指南</a></td></tr><tr><td><a href="http://liubin.github.io/promises-book" target="_blank" rel="noopener">JavaScript Promise迷你书（中文版）</a></td><td><a href="http://javascript.ruanyifeng.com" target="_blank" rel="noopener">阮一峰 Javascript</a></td></tr><tr><td><a href="https://www.awesomes.cn/rank" target="_blank" rel="noopener">前端 TOP 100</a></td><td><a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="noopener">小白的零基础JavaScript全栈教程</a></td></tr></tbody></table><h2 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h2><table><thead><tr><th>Reference</th><th>Reference</th></tr></thead><tbody><tr><td><a href="https://github.com/weui/weui" target="_blank" rel="noopener">WeUI</a></td><td><a href="http://www.bootcss.com" target="_blank" rel="noopener">Bootstrap</a></td></tr><tr><td><a href="http://dev.dcloud.net.cn/mui/" target="_blank" rel="noopener">MUI-最接近原生APP体验的高性能前端框架</a></td><td><a href="http://amazeui.org" target="_blank" rel="noopener">Amaze UI中国首个开源HTML5跨屏前端框架</a></td></tr><tr><td><a href="http://frozenui.github.io/" target="_blank" rel="noopener">Frozen UI</a></td><td><a href="http://foundation.zurb.com/" target="_blank" rel="noopener">Foundation</a></td></tr><tr><td><a href="http://sui.taobao.org/sui/docs/" target="_blank" rel="noopener">SUI</a></td><td><a href="https://github.com/easysoft/zui" target="_blank" rel="noopener">ZUI</a></td></tr><tr><td><a href="http://m.sui.taobao.org" target="_blank" rel="noopener">淘宝HTML5前端框架</a></td><td><a href="http://docs.kissyui.com" target="_blank" rel="noopener">KISSY - 阿里前端JavaScript库</a></td></tr><tr><td><a href="http://nej.netease.com" target="_blank" rel="noopener">网易Nej - Nice Easy Javascript</a></td><td><a href="http://demos.telerik.com/kendo-ui/mvvm/index" target="_blank" rel="noopener">Kendo UI MVVM Demo</a></td></tr><tr><td><a href="http://smartui.chinamzz.com" target="_blank" rel="noopener">Smart UI</a></td><td><a href="http://developer.yahoo.com/yui/grids" target="_blank" rel="noopener">雅虎UI - CSS UI</a></td></tr></tbody></table><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><table><thead><tr><th>Article</th><th>Article</th></tr></thead><tbody><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/41" target="_blank" rel="noopener">CSS Flex布局</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/38" target="_blank" rel="noopener">移动前端开发CSS3</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/43" target="_blank" rel="noopener">响应式布局 媒体查询</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/34" target="_blank" rel="noopener">CSS图片响应式布局</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/stylesheets/styles.less" target="_blank" rel="noopener">lessDemo的less文件</a></td><td></td></tr><tr><td><strong>Reference</strong></td><td><strong>Reference</strong></td></tr><tr><td><a href="http://tympanus.net/codrops/css_reference" target="_blank" rel="noopener">CSS 语法参考</a></td><td><a href="http://isux.tencent.com/css3/index.html" target="_blank" rel="noopener">CSS3动画手册</a></td></tr><tr><td><a href="http://isux.tencent.com/css3/tools.html" target="_blank" rel="noopener">腾讯css3动画制作工具</a></td><td><a href="http://daneden.github.io/animate.css" target="_blank" rel="noopener">animate.css</a></td></tr><tr><td><a href="http://tympanus.net/Development/AnimatedBooks/" target="_blank" rel="noopener">Animated Books with CSS 3D Transforms</a></td><td><a href="http://browserhacks.com/" target="_blank" rel="noopener">Browserhacks</a></td></tr></tbody></table><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><table><thead><tr><th>Article</th><th>Article</th></tr></thead><tbody><tr><td></td></tr></tbody></table><p><a href="http://www.zhihu.com/question/24398907" target="_blank" rel="noopener">HTML5有哪些让你惊艳的demo</a>|<a href="http://www.wallpaperbetter.com/" target="_blank" rel="noopener">Wallpaperbetter</a>|</p><h2 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h2><table><thead><tr><th>Article</th><th>Angular文档</th></tr></thead><tbody><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/26" target="_blank" rel="noopener">Angular源码解读publishExternalAPI函数</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/25" target="_blank" rel="noopener">Angular源码解读setupModuleLoader函数</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/35" target="_blank" rel="noopener">Angular的ng-style用法</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/29" target="_blank" rel="noopener">Angular判断在那个浏览器下打开的服务</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/28" target="_blank" rel="noopener">Angular文字折叠展开组件的原理分析</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/21" target="_blank" rel="noopener">Angular服务Request异步请求的详细分析</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/24" target="_blank" rel="noopener">Angular自定义service服务详解</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/22" target="_blank" rel="noopener">Angular自定义判断上一页是否存在的服务</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/19" target="_blank" rel="noopener">Angular操作cookies方法</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/18" target="_blank" rel="noopener">Angular打印错误的minErr函数</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/17" target="_blank" rel="noopener">Angular的fromJson与toJson方法</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/12" target="_blank" rel="noopener">Angular用ng-repeat生成表单并绑定ng-click时的一个细节</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/6" target="_blank" rel="noopener">Angular的run方法巧妙运用</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/5" target="_blank" rel="noopener">Angular处理Html转义问题</a></td></tr><tr><td><a href="ng-repeat绑定事件和嵌套">ng-repeat绑定事件和嵌套</a></td><td><a href="https://github.com/Wscats/angular-demo/issues/4" target="_blank" rel="noopener">Angular的post请求后台接受不了数据的解决方法</a></td></tr><tr><td><a href="https://github.com/Wscats/angular-demo/issues/19" target="_blank" rel="noopener">ionic总结</a></td><td><a href="https://github.com/Wscats/angular-demo/issues/17" target="_blank" rel="noopener">ui-route和ng-route</a></td></tr><tr><td><a href="https://github.com/Wscats/angular-demo/issues/15" target="_blank" rel="noopener">ng-options&amp;&amp;ng-switch</a></td><td><a href="https://github.com/Wscats/angular-demo/issues/14" target="_blank" rel="noopener">directive组件作用域</a></td></tr><tr><td><a href="https://github.com/Wscats/angular-demo/issues/13" target="_blank" rel="noopener">表单认证</a></td><td><a href="https://github.com/Wscats/angular-demo/issues/11" target="_blank" rel="noopener">$broadcast,$emit and $on</a></td></tr><tr><td><a href="https://github.com/Wscats/angular-demo/issues/9" target="_blank" rel="noopener">自定义过滤器</a></td><td><a href="https://github.com/Wscats/angular-demo/issues/8" target="_blank" rel="noopener">自定义手势指令ng-touch</a></td></tr><tr><td><a href="https://github.com/Wscats/angular-demo/issues/7" target="_blank" rel="noopener">ng-animate</a></td><td><a href="https://github.com/Wscats/angular-demo/issues/3" target="_blank" rel="noopener">单页面应用的技术点</a></td></tr><tr><td><strong>Guess you like</strong></td><td><strong>AppDemo</strong></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html" target="_blank" rel="noopener">Angular商城Demo</a></td><td><a href="https://wscats.github.io/angular-demo/spa/CNode/index.html" target="_blank" rel="noopener">Angular的Cnode社区</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/spa/Stovepipe/index.html" target="_blank" rel="noopener">AngularStovepipe</a></td><td><a href="https://wscats.github.io/angular-demo/spa/TT/index.html" target="_blank" rel="noopener">Angular的新闻客户端</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/spa/mobie-b2bdemo1/index.html" target="_blank" rel="noopener">Angular商城Demo</a></td><td><a href="https://wscats.github.io/angular-demo/spa/CNode/index.html" target="_blank" rel="noopener">Angular的Cnode社区</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/angularjs5examples/inline-editor/index.html" target="_blank" rel="noopener">Angular内联编辑器</a></td><td><a href="https://wscats.github.io/angular-demo/angularjs5examples/instant-search/index.html" target="_blank" rel="noopener">Angular即时搜索</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/angularjs5examples/navigation-menu/index.html" target="_blank" rel="noopener">Angular导航菜单</a></td><td><a href="https://wscats.github.io/angular-demo/angularjs5examples/order-form/index.html" target="_blank" rel="noopener">Angular订单表单</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/angularjs5examples/switchable-grid/index.html" target="_blank" rel="noopener">Angular切换网格</a></td><td><a href="https://wscats.github.io/angular-demo/spa/news/index.html" target="_blank" rel="noopener">Angular新闻＋WEUI DEMO</a> <a href="https://github.com/Wscats/angular-demo/tree/gh-pages/spa/NodeServerAndApi-Weui-News" target="_blank" rel="noopener">源码</a></td></tr><tr><td><strong>Controller</strong></td><td><strong>控制器</strong></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/view/student.html" target="_blank" rel="noopener">Angular控制器demo</a></td><td></td></tr><tr><td><strong>SPA DEMO</strong></td><td><strong>单页面应用</strong></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/weui每日笑话.html" target="_blank" rel="noopener">Angular+Weui单页面应用DEMO-每日笑话</a></td><td></td></tr><tr><td><strong>Service</strong></td><td><strong>服务</strong></td></tr><tr><td><a href="https://github.com/Wscats/angular-demo/blob/gh-pages/%E5%B8%B8%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%B3%95.md" target="_blank" rel="noopener">Angular自定义服务的常用方法</a></td><td><a href="https://wscats.github.io/angular-demo/部分服务demo.html" target="_blank" rel="noopener">Angular部分服务demo</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/Angular自定义Canvas画图服务.html" target="_blank" rel="noopener">Angular自定义Canvas画图服务</a></td><td><a href="https://wscats.github.io/angular-demo/自定义http服务.html" target="_blank" rel="noopener">Angular自定义http服务 面向对象封装</a></td></tr><tr><td><strong>Directive</strong></td><td><strong>组件与指令</strong></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/自定义手势事件.html" target="_blank" rel="noopener">Angular自定义手势指令</a></td><td><a href="https://wscats.github.io/angular-demo/自定义directive轮播图.html" target="_blank" rel="noopener">Angular自定义轮播图组件</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/下拉刷新.html" target="_blank" rel="noopener">Angular自定义下拉刷新组件1</a></td><td><a href="https://wscats.github.io/angular-demo/Angular自定义下拉刷新组件.html" target="_blank" rel="noopener">Angular自定义下拉刷新组件2</a></td></tr><tr><td><strong>Router</strong></td><td><strong>路由</strong></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/UI路由嵌套DEMO.html" target="_blank" rel="noopener">Angular路由嵌套</a></td><td><a href="https://wscats.github.io/angular-demo/uiRoute/index.html" target="_blank" rel="noopener">Angular路由单页多个ui-view</a></td></tr><tr><td><strong>Filter</strong></td><td><strong>过滤器</strong></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/angular自带过滤器.html" target="_blank" rel="noopener">Angular自带过滤器</a></td><td><a href="https://wscats.github.io/angular-demo/自定义关键词检索过滤器.html" target="_blank" rel="noopener">Angular自定义关键词检索过滤器</a></td></tr><tr><td><strong>Animate</strong></td><td><strong>动画</strong></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/ng-animate动画.html" target="_blank" rel="noopener">Angular ng-animate动画1</a></td><td><a href="https://wscats.github.io/angular-demo/ng-animate动画2.html" target="_blank" rel="noopener">Angular ng-animate动画2</a></td></tr><tr><td><strong>Other</strong></td><td><strong>其他</strong></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/iframesdemo.html" target="_blank" rel="noopener">Angular中使用iframe</a></td><td><a href="https://wscats.github.io/angular-demo/%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8.html" target="_blank" rel="noopener">Angular三级联动(1)</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/ngSwitch.html" target="_blank" rel="noopener">Angular中使用ng-switch</a></td><td><a href="https://wscats.github.io/angular-demo/百度地图定位DEMO.html" target="_blank" rel="noopener">百度定位DEMO</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/三级联动改进.html" target="_blank" rel="noopener">Angular三级联动(2)</a></td><td><a href="https://wscats.github.io/angular-demo/事件监听.html" target="_blank" rel="noopener">Angular事件监听</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/jquery模拟ng-repeat.html" target="_blank" rel="noopener">jQuery模拟ng-repeat</a></td><td><a href="https://wscats.github.io/angular-demo/lessDemo.html" target="_blank" rel="noopener">lessDemo</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/ngCookie.html" target="_blank" rel="noopener">Angular自定义cookie服务和ngCookie的使用</a></td><td><a href="https://wscats.github.io/angular-demo/图灵机器人.html" target="_blank" rel="noopener">图灵机器人</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/angular模块化.html" target="_blank" rel="noopener">Angular利用angular.module()实现模块化</a></td><td><a href="https://wscats.github.io/angular-demo/form表单验证.html" target="_blank" rel="noopener">Angular的form表单验证</a></td></tr><tr><td><a href="https://wscats.github.io/angular-demo/ng-repeat嵌套.html" target="_blank" rel="noopener">Angular的ng-repeat嵌套</a></td><td><a href="https://wscats.github.io/angular-demo/angular模块化2.html" target="_blank" rel="noopener">Angular利用angular.module()实现模块化2</a></td></tr><tr><td><strong>PHP</strong></td><td><strong>PHP</strong></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/53" target="_blank" rel="noopener">PHP CURL请求的小细节</a></td><td></td></tr><tr><td><strong>Reference</strong></td><td><strong>Reference</strong></td></tr><tr><td><a href="https://segmentfault.com/a/1190000000443795" target="_blank" rel="noopener">最流行的PHP 代码规范</a></td><td><a href="https://github.com/hfcorriez/fig-standards/blob/zh_CN/%E6%8E%A5%E5%8F%97/PSR-2-coding-style-guide.md" target="_blank" rel="noopener">最流行的PHP 代码规范</a></td></tr><tr><td><a href="http://blog.aijc.net/AngularLearning/" target="_blank" rel="noopener">Angular.js的一些学习资源</a></td><td><a href="http://angularjs.cn" target="_blank" rel="noopener">Angularjs中文社区</a></td></tr><tr><td><a href="https://github.com/angular-ui" target="_blank" rel="noopener">一些扩展Angular UI组件</a></td><td><a href="http://mgcrea.github.io/angular-strap" target="_blank" rel="noopener">Angular UI</a></td></tr><tr><td><a href="http://each.sinaapp.com/angular" target="_blank" rel="noopener">AngularJS在线教程</a></td><td><a href="http://www.zouyesheng.com/angular.html" target="_blank" rel="noopener">Angular学习笔记</a></td></tr></tbody></table><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><table><thead><tr><th>React</th><th>Reference</th></tr></thead><tbody><tr><td><a href="http://www.runoob.com/react/react-tutorial.html" target="_blank" rel="noopener">React教程 菜鸟教程</a></td><td><a href="http://www.ruanyifeng.com/blog/2016/05/react_router.html?utm_source=tool.lu" target="_blank" rel="noopener">React Router 使用教程</a></td></tr><tr><td><a href="http://wiki.jikexueyuan.com/project/react/" target="_blank" rel="noopener">React开发中文手册-极客学院</a></td><td><a href="http://www.hubwiz.com/course/552762019964049d1872fc88/" target="_blank" rel="noopener">React教程-汇智网</a></td></tr><tr><td><a href="http://www.phperz.com/article/15/0712/140537.html#" target="_blank" rel="noopener">React.js快速开始</a></td><td><a href="http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/" target="_blank" rel="noopener">Reactjs 2016最佳实践</a></td></tr><tr><td><a href="https://hulufei.gitbooks.io/react-tutorial/content/introduction.html" target="_blank" rel="noopener">React 入门教程</a></td><td><a href="http://www.hubwiz.com/course/552762019964049d1872fc88/?ch=alloyteam" target="_blank" rel="noopener">汇智网 React教程</a></td></tr><tr><td><a href="https://segmentfault.com/a/1190000002767365" target="_blank" rel="noopener">轻松入门React和Webpack</a></td><td><a href="http://nav.react-china.org/#docs" target="_blank" rel="noopener">React中文索引</a></td></tr><tr><td><a href="http://cn.redux.js.org/" target="_blank" rel="noopener">Redux 中文文档</a></td><td><a href="https://github.com/react-guide/react-router-cn" target="_blank" rel="noopener">React Router官方文档中文翻译</a></td></tr><tr><td><a href="http://www.cnblogs.com/kunyashaw/p/5619256.html" target="_blank" rel="noopener">React入门教程</a></td><td><a href="http://www.ibm.com/developerworks/cn/web/1509_dongyue_react/index.html" target="_blank" rel="noopener">React介绍及实践教程</a></td></tr><tr><td><a href="https://facebook.github.io/react/index.html" target="_blank" rel="noopener">React.js 官方网址</a></td><td><a href="https://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="noopener">React.js 官方文档</a></td></tr><tr><td><a href="http://material-ui.com/#" target="_blank" rel="noopener">React.js material UI</a></td><td><a href="http://touchstonejs.io" target="_blank" rel="noopener">React.js TouchstoneJS UI</a></td></tr><tr><td><a href="http://amazeui.org/react" target="_blank" rel="noopener">React.js amazeui UI</a></td><td><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">React 入门实例教程 - 阮一峰</a></td></tr><tr><td><a href="http://wiki.jikexueyuan.com/project/react-native" target="_blank" rel="noopener">React Native 中文版</a></td><td><a href="https://fakefish.github.io/react-webpack-cookbook" target="_blank" rel="noopener">Webpack 和 React 小书 - gitbook</a></td></tr></tbody></table><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><table><thead><tr><th>Vue</th><th>AppDemo</th><th>Demo</th></tr></thead><tbody><tr><td><a href="https://wscats.github.io/vue-demo/news/index.html" target="_blank" rel="noopener">NewsDemo</a></td><td><a href="https://wscats.github.io/vue-demo/vue计算属性.html" target="_blank" rel="noopener">vue计算属性</a></td><td><a href="https://wscats.github.io/vue-demo/vue生命周期.html" target="_blank" rel="noopener">vue生命周期</a></td></tr><tr><td><strong>Article</strong></td><td><strong>Vue文档</strong></td><td></td></tr><tr><td><a href="https://github.com/Wscats/vue-demo/issues/2" target="_blank" rel="noopener">Vue-cli脚手架</a></td><td><a href="https://github.com/Wscats/vue-demo/issues/3" target="_blank" rel="noopener">Vue组件</a></td><td><a href="https://github.com/Wscats/vue-demo/issues/8" target="_blank" rel="noopener">vue自定义指令</a></td></tr><tr><td><a href="https://github.com/Wscats/vue-demo/issues/9" target="_blank" rel="noopener">Vue过渡动画</a></td><td><a href="https://github.com/Wscats/vue-demo/issues/7" target="_blank" rel="noopener">Vue指令</a></td><td><a href="https://github.com/Wscats/vue-demo/issues/6" target="_blank" rel="noopener">Vue api文档</a></td></tr><tr><td><a href="https://github.com/Wscats/vue-demo/issues/5" target="_blank" rel="noopener">Vue执行ajax请求</a></td><td><a href="https://github.com/Wscats/vue-demo/issues/4" target="_blank" rel="noopener">vue实现类似angular服务的方法</a></td><td><a href="https://github.com/Wscats/vue-demo/issues/10" target="_blank" rel="noopener">Vue源码参考文档</a></td></tr><tr><td><strong>Router</strong></td><td><strong>路由</strong></td><td></td></tr><tr><td><a href="https://wscats.github.io/vue-demo/路由.html" target="_blank" rel="noopener">路由demo</a></td><td><a href="https://wscats.github.io/vue-demo/路由2.html" target="_blank" rel="noopener">路由demo2</a></td><td></td></tr><tr><td><strong>Directive</strong></td><td><strong>指令</strong></td><td></td></tr><tr><td><a href="https://wscats.github.io/vue-demo/指令.html" target="_blank" rel="noopener">指令demo</a></td><td><a href="https://wscats.github.io/vue-demo/自定义指令.html" target="_blank" rel="noopener">自定义指令demo</a></td><td><a href="https://wscats.github.io/vue-demo/滑动手势指令.html" target="_blank" rel="noopener">滑动手势demo</a></td></tr><tr><td><strong>Filter</strong></td><td><strong>过滤器</strong></td><td></td></tr><tr><td><a href="https://wscats.github.io/vue-demo/过滤器.html" target="_blank" rel="noopener">过滤器demo</a></td><td><a href="https://wscats.github.io/vue-demo/vue使用过滤器实现分页.html" target="_blank" rel="noopener">过滤器实现分页demo</a></td><td><a href="https://wscats.github.io/vue-demo/vue过滤器读写数据.html" target="_blank" rel="noopener">过滤器读写数据</a></td></tr><tr><td><strong>Transition</strong></td><td><strong>过渡</strong></td><td></td></tr><tr><td><a href="https://wscats.github.io/vue-demo/过渡.html" target="_blank" rel="noopener">过渡demo</a></td><td><a href="https://wscats.github.io/vue-demo/过渡2.html" target="_blank" rel="noopener">过渡demo2</a></td><td></td></tr><tr><td><strong>Form</strong></td><td><strong>表单</strong></td><td></td></tr><tr><td><a href="https://wscats.github.io/vue-demo/vue获取表单值.html" target="_blank" rel="noopener">获取表单值</a></td><td></td><td></td></tr><tr><td><strong>Computed</strong></td><td><strong>计算</strong></td><td></td></tr><tr><td><a href="https://wscats.github.io/vue-demo/vue计算属性.html" target="_blank" rel="noopener">计算属性</a></td><td></td><td></td></tr><tr><td>Component</td><td>组件</td><td></td></tr><tr><td><a href="https://wscats.github.io/vue-demo/组件.html" target="_blank" rel="noopener">组件demo</a></td><td></td><td></td></tr><tr><td><strong>Reference</strong></td><td><strong>Reference</strong></td><td><strong>Reference</strong></td></tr><tr><td><a href="http://cn.vuejs.org" target="_blank" rel="noopener">Vue官网</a></td><td><a href="http://forum.vuejs.org" target="_blank" rel="noopener">Vue论坛</a></td><td><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">Awesome-vue</a></td></tr></tbody></table><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><table><thead><tr><th>Node</th><th>Article</th></tr></thead><tbody><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/44" target="_blank" rel="noopener">node技巧</a></td><td><a href="https://github.com/Wscats/angular-demo/tree/gh-pages/diyNodeServer" target="_blank" rel="noopener">NodeJs静态服务器</a></td></tr><tr><td><strong>Reference</strong></td><td><strong>Reference</strong></td></tr><tr><td><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="noopener">Node.js 包教不包会</a></td><td><a href="http://nqdeng.github.io/7-days-nodejs/" target="_blank" rel="noopener">七天学会NodeJS</a></td></tr><tr><td><a href="http://blog.fens.me/series-nodejs" target="_blank" rel="noopener">从零开始nodejs系列文章</a></td><td><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="noopener">Node入门</a></td></tr><tr><td><a href="http://ourjs.com/detail/529ca5950cb6498814000005" target="_blank" rel="noopener">Node初学者入门，一本全面的NodeJS教程</a></td></tr></tbody></table><h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><table><thead><tr><th>Gulp</th><th>Article</th></tr></thead><tbody><tr><td><a href="https://github.com/Wscats/glup" target="_blank" rel="noopener">Gulp Demo</a></td><td></td></tr><tr><td><strong>Gulp</strong></td><td><strong>Reference</strong></td></tr><tr><td><a href="http://gulpjs.com" target="_blank" rel="noopener">Gulp官网</a></td><td><a href="http://www.gulpjs.com.cn" target="_blank" rel="noopener">Gulp中文网</a></td></tr><tr><td><a href="https://github.com/Platform-CUF/use-gulp" target="_blank" rel="noopener">Gulp资料收集</a></td><td><a href="http://javascript.ruanyifeng.com/tool/gulp.html" target="_blank" rel="noopener">Gulp：任务自动管理工具 - ruanyifeng</a></td></tr><tr><td><a href="http://gulpjs.com/plugins]" target="_blank" rel="noopener">Gulp插件</a></td><td><a href="http://www.ido321.com/1622.html" target="_blank" rel="noopener">Gulp不完全入门教程</a></td></tr><tr><td><a href="https://github.com/nimojs/gulp-book" target="_blank" rel="noopener">Gulp 入门指南</a></td></tr></tbody></table><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table><thead><tr><th>Other</th><th>Article</th></tr></thead><tbody><tr><td><a href="https://github.com/Wscats/node-demo/issues/4" target="_blank" rel="noopener">关于Pornographic website的一些前端分析</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/50" target="_blank" rel="noopener">微信公众号开发</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/30" target="_blank" rel="noopener">Atom技巧总结</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/46" target="_blank" rel="noopener">Mac小技巧</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/9" target="_blank" rel="noopener">CSDN页面内JS跳转脚本</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/8" target="_blank" rel="noopener">CSDN博客隐藏配置</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/7" target="_blank" rel="noopener">百度设置小度机器人出现</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/2" target="_blank" rel="noopener">前端冷知识，妙用浏览器地址栏</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/27" target="_blank" rel="noopener">Vim笔记</a></td><td><a href="https://github.com/Wscats/Good-text-Share/issues/48" target="_blank" rel="noopener">Cordova配置&amp;&amp;Ionic配置（WebApp混合开发环境）</a></td></tr><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/33" target="_blank" rel="noopener">IE8及以下按钮超链接无法跳转的问题</a></td></tr></tbody></table><h2 id="分享功能"><a href="#分享功能" class="headerlink" title="分享功能"></a>分享功能</h2><table><thead><tr><th>Share</th><th>Reference</th></tr></thead><tbody><tr><td><a href="http://share.baidu.com" target="_blank" rel="noopener">百度分享(PC)</a></td><td><a href="http://jiathis.com" target="_blank" rel="noopener">JiaThis(PC)</a></td></tr><tr><td><a href="http://developer.baidu.com/soc/share" target="_blank" rel="noopener">社会化分享组件(Mobile)</a></td><td><a href="http://www.mob.com" target="_blank" rel="noopener">ShareSDK轻松实现社会化功能(Mobile)</a></td></tr><tr><td><a href="http://dev.umeng.com/social/android/quick-integration" target="_blank" rel="noopener">友盟分享(Mobile)</a></td></tr></tbody></table><h2 id="在线演示"><a href="#在线演示" class="headerlink" title="在线演示"></a>在线演示</h2><table><thead><tr><th>Reference</th><th>Reference</th></tr></thead><tbody><tr><td><a href="http://runjs.cn" target="_blank" rel="noopener">js 在线编辑 - runjs</a></td><td><a href="http://jsbin.com" target="_blank" rel="noopener">js 在线编辑 - jsbin</a></td></tr><tr><td><a href="http://codepen.io" target="_blank" rel="noopener">js 在线编辑 - codepen</a></td><td><a href="http://jsfiddle.net" target="_blank" rel="noopener">js 在线编辑 - jsfiddle</a></td></tr><tr><td><a href="http://ideone.com" target="_blank" rel="noopener">java 在线编辑 - runjs</a></td><td><a href="http://code.hcharts.cn" target="_blank" rel="noopener">js 在线编辑 - hcharts</a></td></tr><tr><td><a href="http://jsdm.com" target="_blank" rel="noopener">js 在线编辑 - jsdm</a></td><td><a href="http://sqlfiddle.com" target="_blank" rel="noopener">sql 在线编辑 - sqlfiddle</a></td></tr><tr><td><a href="https://thimble.mozilla.org" target="_blank" rel="noopener">mozilla 在线编辑器</a></td></tr></tbody></table><h2 id="富文本编辑器"><a href="#富文本编辑器" class="headerlink" title="富文本编辑器"></a>富文本编辑器</h2><table><thead><tr><th>Reference</th><th>Reference</th></tr></thead><tbody><tr><td><a href="http://ueditor.baidu.com/website" target="_blank" rel="noopener">百度ueditor</a></td><td><a href="http://ckeditor.com" target="_blank" rel="noopener">ckeditor</a></td></tr><tr><td><a href="https://www.tinymce.com" target="_blank" rel="noopener">tinymce</a></td><td><a href="http://kindeditor.net" target="_blank" rel="noopener">kindeditor</a></td></tr><tr><td><a href="http://www.bootcss.com/p/bootstrap-wysiwyg" target="_blank" rel="noopener">wysiwyg</a></td><td><a href="http://integ.github.io/BachEditor" target="_blank" rel="noopener">BachEditor</a></td></tr><tr><td><a href="https://github.com/mycolorway/simditor" target="_blank" rel="noopener">simditor</a></td><td><a href="https://github.com/summernote/summernote" target="_blank" rel="noopener">summernote</a></td></tr><tr><td><a href="http://neilj.github.io/Squire" target="_blank" rel="noopener">Squire</a></td><td><a href="https://github.com/wangfupeng1988/wangEditor" target="_blank" rel="noopener">wangEditor</a></td></tr></tbody></table><h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><table><thead><tr><th>Reference</th><th>Reference</th></tr></thead><tbody><tr><td><a href="http://www.cnblogs.com/constantince/p/4565261.html" target="_blank" rel="noopener">Chrome - 基础</a></td><td><a href="http://www.cnblogs.com/constantince/p/4579121.html" target="_blank" rel="noopener">Chrome - 进阶</a></td></tr><tr><td><a href="http://www.cnblogs.com/constantince/p/4585983.html" target="_blank" rel="noopener">Chrome - 性能</a></td><td><a href="http://www.cnblogs.com/constantince/p/4607497.html" target="_blank" rel="noopener">Chrome - 性能进阶</a></td></tr><tr><td><a href="http://www.cnblogs.com/constantince/p/4624241.html" target="_blank" rel="noopener">Chrome - 移动</a></td><td><a href="http://www.cnblogs.com/liyunhua/p/4544738.html" target="_blank" rel="noopener">Chrome - 使用技巧</a></td></tr><tr><td><a href="http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html" target="_blank" rel="noopener">Chrome - Console控制台不完全指南</a></td><td><a href="http://anti-code.com/devtools-cheatsheet" target="_blank" rel="noopener">chrome开发工具快捷键</a></td></tr><tr><td><a href="http://www.iinterest.net/2014/05/09/chrome-dev-tool-workspace" target="_blank" rel="noopener">Chrome 开发工具 Workspace 使用</a></td><td><a href="http://www.cppblog.com/deercoder/archive/2011/10/22/158886.html" target="_blank" rel="noopener">Chrome神器Vimium快捷键学习记录</a></td></tr><tr><td><a href="http://www.w3cplus.com/sassguide/debug.html" target="_blank" rel="noopener">Sass调试-w3cplus</a></td><td><a href="http://www.w3cplus.com/tools/how-to-use-chrome-devtools-like-a-pro.html" target="_blank" rel="noopener">如何更专业的使用Chrome开发者工具-w3cplus</a></td></tr><tr><td><a href="http://sentsin.com/web/253.html" target="_blank" rel="noopener">Chrome调试canvas</a></td><td><a href="https://segmentfault.com/a/1190000000683599" target="_blank" rel="noopener">神器——Chrome开发者工具(一)</a></td></tr><tr><td><a href="https://xinranliu.me/2015-05-22-qiqu-performance" target="_blank" rel="noopener">奇趣百科性能优化(Chrome DevTools 中的 Timeline Profils 等工具使用介绍</a></td><td><a href="http://frontenddev.org/link/15-tips-of-chrome-developer-tools.html" target="_blank" rel="noopener">Chrome 开发者工具的 15 个小技巧</a></td></tr><tr><td><a href="http://1ke.co/course/361" target="_blank" rel="noopener">Chrome开发者工具不完全指南</a></td><td><a href="http://segmentfault.com/a/1190000003882567" target="_blank" rel="noopener">Chrome 开发者工具使用技巧</a></td></tr></tbody></table><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><table><thead><tr><th>Reference</th><th>Reference</th></tr></thead><tbody><tr><td><a href="http://www.infoq.com/cn/articles/javascript-high-performance-animation-and-page-rendering" target="_blank" rel="noopener">Javascript高性能动画与页面渲染</a></td><td><a href="http://isux.tencent.com/h5-performance.html" target="_blank" rel="noopener">移动H5前端性能优化指南</a></td></tr><tr><td><a href="http://www.uisdc.com/front-end-performance-for-web-designers-and-front-end-developers" target="_blank" rel="noopener">给网页设计师和前端开发者看的前端性能优化</a></td><td><a href="http://www.zhangxinxu.com/wordpress/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD/" target="_blank" rel="noopener">张鑫旭——前端性能</a></td></tr><tr><td><a href="http://www.aliued.cn/2013/01/20/web%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E8%BF%9B%E9%98%B6%E8%B7%AF.html" target="_blank" rel="noopener">web前端性能优化进阶路</a></td><td><a href="http://www.feelcss.com/tag/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD" target="_blank" rel="noopener">Hey——前端性能</a></td></tr><tr><td><a href="http://www.cnblogs.com/yslow" target="_blank" rel="noopener">YSLOW中文介绍</a></td><td><a href="http://www.360doc.com/content/10/0928/09/2588264_56971287.shtml" target="_blank" rel="noopener">Yahoo!团队实践分享：网站性能</a></td></tr><tr><td><a href="http://tgideas.qq.com/webplat/info/news_version3/804/808/811/m579/201109/41355.shtml" target="_blank" rel="noopener">加载，不只是少一点点</a></td><td><a href="http://coolshell.cn/articles/6470.html" target="_blank" rel="noopener">由12306谈谈网站前端性能和后端性能优化</a></td></tr><tr><td><a href="http://www.alloyteam.com/2012/10/high-performance-html" target="_blank" rel="noopener">【高性能前端1】高性能HTML</a></td><td><a href="http://www.alloyteam.com/2012/10/high-performance-css" target="_blank" rel="noopener">【高性能前端2】高性能CSS</a></td></tr><tr><td><a href="http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part1" target="_blank" rel="noopener">前端工程与性能优化（上）：静态资源版本更新与缓存</a></td><td><a href="http://www.infoq.com/cn/articles/front-end-engineering-and-performance-optimization-part2" target="_blank" rel="noopener">前端工程与性能优化（下）：静态资源管理与模板框架</a></td></tr><tr><td><a href="http://blog.jobbole.com/48369" target="_blank" rel="noopener">HTTPS连接的前几毫秒发生了什么</a></td><td><a href="http://uicss.cn/yslow/#more-12319" target="_blank" rel="noopener">Yslow</a></td></tr><tr><td><a href="https://github.com/amfe/article/issues/1" target="_blank" rel="noopener">阿里无线前端性能优化指南(Pt.1 加载期优化)</a></td><td><a href="http://www.cnblogs.com/developersupport/p/3248695.html" target="_blank" rel="noopener">毫秒必争，前端网页性能最佳实践</a></td></tr></tbody></table><h2 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h2><table><thead><tr><th>Reference</th><th>Reference</th></tr></thead><tbody><tr><td><a href="http://www.bootcdn.cn/jquery" target="_blank" rel="noopener">Jquery&amp;Bootstrap中文网开源项目免费 CDN 服务</a></td><td><a href="http://www.bootcdn.cn" target="_blank" rel="noopener">Bootstrap中文网开源项目免费 CDN 服务</a></td></tr><tr><td><a href="http://lib.sinaapp.com" target="_blank" rel="noopener">新浪CDN</a></td><td><a href="http://cdn.code.baidu.com" target="_blank" rel="noopener">百度静态资源公共库</a></td></tr><tr><td><a href="http://staticfile.org" target="_blank" rel="noopener">开放静态文件 CDN - 七牛</a></td><td><a href="http://www.jq22.com/cdn" target="_blank" rel="noopener">CDN加速 - jq22</a></td></tr><tr><td><a href="http://www.asp.net/ajax/cdn" target="_blank" rel="noopener">微软CDN</a></td><td><a href="https://code.angularjs.org/1.5.8/" target="_blank" rel="noopener">Angular CDN</a></td></tr><tr><td><a href="http://libs.useso.com" target="_blank" rel="noopener">360网站卫士常用前端公共库CDN服务</a></td></tr></tbody></table><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><table><thead><tr><th>Article</th><th>Article</th></tr></thead><tbody><tr><td><a href="https://github.com/Wscats/Good-text-Share/issues/20" target="_blank" rel="noopener">Git操作</a></td><td><a href="http://blog.csdn.net/qq_27080247/article/details/49942991" target="_blank" rel="noopener">Git CSDN Blog</a></td></tr><tr><td><strong>Reference</strong></td><td><strong>Reference</strong></td></tr><tr><td><a href="http://git-scm.com" target="_blank" rel="noopener">Git-scm</a></td><td><a href="https://git-for-windows.github.io" target="_blank" rel="noopener">Git-for-windows</a></td></tr><tr><td><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰-Git教程</a></td><td><a href="http://www.worldhello.net/gotgithub/index.html" target="_blank" rel="noopener">Gogithub</a></td></tr><tr><td><a href="http://pcottle.github.io/learnGitBranching" target="_blank" rel="noopener">Git常规命令练习</a></td><td><a href="https://github.com/xirong/my-git" target="_blank" rel="noopener">Git的资料整理</a></td></tr><tr><td><a href="http://www.cnblogs.com/fanfan259/p/4810517.html" target="_blank" rel="noopener">我所记录的git命令（非常实用）</a></td><td><a href="https://github.com/phodal/github-roam" target="_blank" rel="noopener">GitHub 漫游指南</a></td></tr><tr><td><a href="https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.zh-cn.md" target="_blank" rel="noopener">GitHub秘籍</a></td><td><a href="http://onlywei.github.io/explain-git-with-d3" target="_blank" rel="noopener">动画方式练习git</a></td></tr></tbody></table><h2 id="Sass-amp-Less"><a href="#Sass-amp-Less" class="headerlink" title="Sass&amp;Less"></a>Sass&amp;Less</h2><table><thead><tr><th>Article</th><th>Article</th></tr></thead><tbody><tr><td><a href="https://github.com/Wscats/less-demo/issues/1" target="_blank" rel="noopener">Less教程</a></td><td></td></tr><tr><td><strong>Reference</strong></td><td><strong>Reference</strong></td></tr><tr><td><a href="http://www.w3cplus.com/sassguide" target="_blank" rel="noopener">Sass</a></td><td><a href="http://sass.bootcss.com" target="_blank" rel="noopener">Sass中文文档</a></td></tr><tr><td><a href="http://less.bootcss.com" target="_blank" rel="noopener">Less</a></td></tr></tbody></table><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><table><thead><tr><th>Reference</th><th>Reference</th></tr></thead><tbody><tr><td><a href="http://wowubuntu.com/markdown" target="_blank" rel="noopener">Markdown 语法说明 (简体中文版)</a></td><td><a href="https://github.com/LearnShare/Learning-Markdown/blob/master/README.md" target="_blank" rel="noopener">Markdown入门参考</a></td></tr><tr><td><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Mdeditor(一款国内的在线markdown编辑器)</a></td><td><a href="https://stackedit.io" target="_blank" rel="noopener">Stackedit(国外的在线markdown编辑器，功能强大，同步云盘)</a></td></tr><tr><td><a href="http://bh-lay.github.io/mditor" target="_blank" rel="noopener">Mditor一款轻量级的markdown编辑器</a></td><td><a href="https://github.com/lepture/editor" target="_blank" rel="noopener">lepture-editor</a></td></tr><tr><td><a href="https://github.com/jbt/markdown-editor" target="_blank" rel="noopener">Markdown-editor</a></td></tr></tbody></table><h2 id="前端文档"><a href="#前端文档" class="headerlink" title="前端文档"></a>前端文档</h2><table><thead><tr><th>Reference</th><th>Reference</th></tr></thead><tbody><tr><td><a href="https://github.com/JacksonTian/fks" target="_blank" rel="noopener">前端知识结构</a></td><td><a href="https://github.com/unruledboy/WebFrontEndStack" target="_blank" rel="noopener">Web前端开发大系概览</a></td></tr><tr><td><a href="https://github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="noopener">免费的编程中文书籍索</a></td><td><a href="https://github.com/dypsilon/frontend-dev-bookmarks" target="_blank" rel="noopener">前端书籍</a></td></tr><tr><td><a href="https://github.com/vhf/free-programming-books" target="_blank" rel="noopener">前端免费书籍大全</a></td><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/A_re-introduction_to_JavaScript" target="_blank" rel="noopener">重新介绍JavaScript（JS教程）</a></td></tr><tr><td><a href="https://www.gitbook.com 国外的在线markdown可编辑成书" target="_blank" rel="noopener">Gitbook</a></td><td><a href="https://github.com/Front-End-Developers-Hunan/Front-End-Develop-Guide" target="_blank" rel="noopener">Front-End-Develop-Guide 前端开发指南</a></td></tr><tr><td><a href="https://li-xinyang.gitbooks.io/frontend-notebook/content" target="_blank" rel="noopener">前端开发笔记本</a></td><td><a href="https://github.com/nieweidong/fetool" target="_blank" rel="noopener">大前端工具集</a></td></tr><tr><td><a href="https://dwqs.gitbooks.io/frontenddevhandbook/content" target="_blank" rel="noopener">前端开发者手册</a></td><td><a href="https://github.com/qiu-deqing/FE-learning" target="_blank" rel="noopener">结合个人经历总结的前端入门方法</a></td></tr><tr><td><a href="http://blog.csdn.net/qq_25827845/article/details/53079094" target="_blank" rel="noopener">2016最新前端学习计划</a></td></tr></tbody></table><h2 id="前端规范"><a href="#前端规范" class="headerlink" title="前端规范"></a>前端规范</h2><table><thead><tr><th>Reference</th><th>Reference</th></tr></thead><tbody><tr><td><a href="http://alloyteam.github.io/CodeGuide/" target="_blank" rel="noopener">通过分析github代码库总结出来的工程师代码书写习惯</a></td><td><a href="http://codeguide.bootcss.com" target="_blank" rel="noopener">HTML&amp;CSS编码规范 by @mdo</a></td></tr><tr><td><a href="http://yuwenhui.github.io" target="_blank" rel="noopener">前端编码规范之js - by yuwenhui</a></td><td><a href="http://www.cnblogs.com/hustskyking/p/javascript-spec.html" target="_blank" rel="noopener">前端编码规范之js - by 李靖</a></td></tr><tr><td><a href="https://github.com/yuche/javascript#table-of-contents" target="_blank" rel="noopener">Airbnb JavaScript 编码规范（简体中文版）</a></td><td><a href="http://www.zhihu.com/question/20351507" target="_blank" rel="noopener">AMD与CMD规范的区别</a></td></tr><tr><td><a href="http://www.cnblogs.com/tugenhua0707/p/3507957.html" target="_blank" rel="noopener">AMD与CMD规范的区别</a></td><td><a href="http://docs.kissyui.com/1.4/docs/html/tutorials/style-guide/kissy-source-style.html" target="_blank" rel="noopener">KISSY 源码规范</a></td></tr><tr><td><a href="http://blog.jobbole.com/79075" target="_blank" rel="noopener">前端代码规范及最佳实践</a></td><td><a href="http://coderlmn.github.io/code-standards" target="_blank" rel="noopener">百度前端规范</a></td></tr><tr><td><a href="http://blog.jobbole.com/79484" target="_blank" rel="noopener">JavaScript风格指南/编码规范（Airbnb公司版）</a></td><td><a href="http://nec.netease.com/standard" target="_blank" rel="noopener">网易前端开发规范</a></td></tr><tr><td><a href="https://github.com/ecomfe/spec" target="_blank" rel="noopener">前端规范资源列表</a></td><td><a href="http://codecloud.net/5622.html" target="_blank" rel="noopener">Web 前端开发规范文档</a></td></tr></tbody></table><h2 id="前端面试"><a href="#前端面试" class="headerlink" title="前端面试"></a>前端面试</h2><table><thead><tr><th>Reference</th><th>Reference</th></tr></thead><tbody><tr><td><a href="http://www.cnblogs.com/imwtr/p/4685546.html" target="_blank" rel="noopener">2016校招内推 – 阿里巴巴前端 – 四面面试经历</a></td><td><a href="https://www.nowcoder.com/discuss/3196" target="_blank" rel="noopener">那几个月在找工作（百度，网易游戏，华为）</a></td></tr><tr><td><a href="https://segmentfault.com/a/1190000000465431" target="_blank" rel="noopener">前端开发面试题</a></td><td><a href="https://github.com/hawx1993/Front-end-Interview-questions" target="_blank" rel="noopener">Front-end-Interview-questions</a></td></tr><tr><td><a href="http://ourjs.com/detail/5%E4%B8%AA%E7%BB%8F%E5%85%B8%E7%9A%84%E5%89%8D%E7%AB%AF%E" target="_blank" rel="noopener">5个经典的前端面试问题</a></td><td><a href="https://github.com/h5bp/Front-end-Developer-Interview-Questions/tree/master/Translations/Chinese" target="_blank" rel="noopener">Front-end-Developer-Interview-Questions</a></td></tr><tr><td><a href="http://blog.jobbole.com/78738/" target="_blank" rel="noopener">BAT及各大互联网公司2014前端笔试面试题：JavaScript篇</a></td><td><a href="https://github.com/paddingme/Front-end-Web-Development-Interview-Question" target="_blank" rel="noopener">前端开发面试题大收集</a></td></tr><tr><td><a href="https://github.com/qiu-deqing/FE-interview" target="_blank" rel="noopener">收集的前端面试题和答案</a></td><td><a href="https://github.com/markyun/My-blog/blob/master/Front-end-Developer-Questions/Questions-and-Answers/README.md" target="_blank" rel="noopener">前端开发面试题</a></td></tr><tr><td><a href="https://segmentfault.com/a/1190000005947094" target="_blank" rel="noopener">前端面试大全</a></td><td><a href="https://mdluo.github.io/blog/about-front-end-interview/" target="_blank" rel="noopener">关于前端面试</a></td></tr></tbody></table><h2 id="前端网站"><a href="#前端网站" class="headerlink" title="前端网站"></a>前端网站</h2><table><thead><tr><th>Reference</th><th>Reference</th></tr></thead><tbody><tr><td><a href="https://gold.xitu.io/" target="_blank" rel="noopener">掘金</a></td><td><a href="http://fex.baidu.com/" target="_blank" rel="noopener">百度FEX</a></td></tr><tr><td><a href="http://www.aliued.com/" target="_blank" rel="noopener">阿里UED</a></td><td><a href="http://www.runoob.com/" target="_blank" rel="noopener">菜鸟教程</a></td></tr><tr><td><a href="http://www.qdfuns.com/portal.php" target="_blank" rel="noopener">QDFuns</a></td><td><a href="http://www.imooc.com/" target="_blank" rel="noopener">幕课网</a></td></tr><tr><td><a href="http://codepen.io/" target="_blank" rel="noopener">Codepen</a></td><td><a href="http://sentsin.com/daohang/" target="_blank" rel="noopener">Sentsin</a></td></tr><tr><td><a href="http://www.ctolib.com/javascript/" target="_blank" rel="noopener">CTOLib</a></td><td><a href="http://www.ctolib.com/nodejs/" target="_blank" rel="noopener">CTOLib/Node</a></td></tr></tbody></table><h2 id="JS练习"><a href="#JS练习" class="headerlink" title="JS练习"></a>JS练习</h2><table><thead><tr><th>Reference</th><th>Reference</th></tr></thead><tbody><tr><td><a href="https://www.codewars.com/" target="_blank" rel="noopener">Codewars</a></td><td><a href="http://javascript-puzzlers.herokuapp.com/" target="_blank" rel="noopener">Javascript-puzzlers</a></td></tr><tr><td><a href="https://freecodecamp.cn/" target="_blank" rel="noopener">Freecodecamp中文版</a></td><td><a href="http://es6katas.org/" target="_blank" rel="noopener">ES6katas</a></td></tr><tr><td><a href="https://www.nowcoder.com/ta/js-assessment" target="_blank" rel="noopener">Now Coder牛客网</a></td><td><a href="https://leetcode.com/" target="_blank" rel="noopener">Leetcode</a></td></tr><tr><td><a href="https://nodeschool.io/" target="_blank" rel="noopener">Nodeschool</a></td><td><a href="https://www.hackerrank.com/" target="_blank" rel="noopener">Hackerrank</a></td></tr></tbody></table><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><table><thead><tr><th>Reference</th><th>Reference</th></tr></thead><tbody><tr><td><a href="https://github.com/Ralph-Wang/algorithm.in.js" target="_blank" rel="noopener">数据结构与算法 JavaScript 描述. 章节练习</a></td><td><a href="https://github.com/twobin/twobinSort" target="_blank" rel="noopener">常见排序算法（JS版）</a></td></tr><tr><td><a href="https://github.com/luofei2011/jsAgm/blob/master/js/sort.js" target="_blank" rel="noopener">经典排序</a></td><td><a href="https://github.com/hechangmin/jssort" target="_blank" rel="noopener">常见排序算法-js版本</a></td></tr></tbody></table><h2 id="ES"><a href="#ES" class="headerlink" title="ES"></a>ES</h2><table><thead><tr><th>Reference</th><th>Reference</th></tr></thead><tbody><tr><td><a href="http://es6-org.github.io/exploring-es6/" target="_blank" rel="noopener">Exploring-ES6翻译</a></td><td><a href="http://es6.ruanyifeng.com" target="_blank" rel="noopener">阮一峰 ES6</a></td></tr><tr><td><a href="http://yanhaijing.com/es5" target="_blank" rel="noopener">ECMA-262，第 5 版</a></td><td><a href="http://es5.github.io" target="_blank" rel="noopener">ES5</a></td></tr></tbody></table><hr><blockquote><p>本文引用自：<a href="https://github.com/GuoXingGitHub/Front-end-tutorial" target="_blank" rel="noopener">https://github.com/GuoXingGitHub/Front-end-tutorial</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Javascript&quot;&gt;&lt;a href=&quot;#Javascript&quot; class=&quot;headerlink&quot; title=&quot;Javascript&quot;&gt;&lt;/a&gt;Javascript&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Article&lt;/th&gt;
&lt;th
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="工具/插件" scheme="http://axss.gitee.io/tags/%E5%B7%A5%E5%85%B7-%E6%8F%92%E4%BB%B6/"/>
    
      <category term="web前端" scheme="http://axss.gitee.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>C#控件属性事件大全</title>
    <link href="http://axss.gitee.io/2018/03/12/%E6%8A%80%E6%9C%AF/2018-03-10-csharp%E6%8E%A7%E4%BB%B6%E5%B1%9E%E6%80%A7%E4%BA%8B%E4%BB%B6%E5%A4%A7%E5%85%A8/"/>
    <id>http://axss.gitee.io/2018/03/12/技术/2018-03-10-csharp控件属性事件大全/</id>
    <published>2018-03-12T07:00:42.000Z</published>
    <updated>2018-03-13T02:58:44.841Z</updated>
    
    <content type="html"><![CDATA[<p><a href="csharp控件属性事件大全.doc">点击下载 C#控件属性事件大全</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;csharp控件属性事件大全.doc&quot;&gt;点击下载 C#控件属性事件大全&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="csharp" scheme="http://axss.gitee.io/tags/csharp/"/>
    
  </entry>
  
  <entry>
    <title>c语言提高6-数据结构,双向循环链表,动态库和静态库</title>
    <link href="http://axss.gitee.io/2018/03/12/%E6%8A%80%E6%9C%AF/2015-04-13-c%E8%AF%AD%E8%A8%80%E6%8F%90%E9%AB%986-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8-%E5%8A%A8%E6%80%81%E5%BA%93%E5%92%8C%E9%9D%99%E6%80%81%E5%BA%93/"/>
    <id>http://axss.gitee.io/2018/03/12/技术/2015-04-13-c语言提高6-数据结构-双向循环链表-动态库和静态库/</id>
    <published>2018-03-12T06:49:19.000Z</published>
    <updated>2018-03-13T02:58:44.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>双向循环链表和单向链表的区别:<br>1: 双向链表比单向链表多了一个指向前一个节点的指针<br>2: 单向链表的验证结束位置是判断是否为NULL，双向循环链表判断是否结束是判断节点是否跟head节点是否相同，所以我们处理双向链表的时候总是要先保存好头结点</p><h3 id="双向链表所有代码事例"><a href="#双向链表所有代码事例" class="headerlink" title="双向链表所有代码事例"></a>双向链表所有代码事例</h3><p><a href="双向链表所有代码.c">双向链表所有代码</a></p><h2 id="动态库和静态库"><a href="#动态库和静态库" class="headerlink" title="动态库和静态库"></a>动态库和静态库</h2><p>动态库和静态库的加载是在链接阶段，因此在链接之前我们只需要提供申明就行，在最后链接上动态或者静态库<br>动态库和静态库: 动态和静态库都是编译好的二进制文件<br>动态库和静态库的标识:.o是静态库  .so是动态库<br>动态库的特点和缺点:动态库在编译的时候没有加载进目标代码中，所以会使动态库所产生的可执行性文件比较小，但是每次程序运行都需要提供对应的动态库，并且同一时间供多个线程调用<br>静态库的特点和缺点:静态库在编译的时候就被加载进了目标代码中，所以会显得产生的可执行性文件会比较大，但是后面运行程序的时候都不用再提供库了，并且同一时间点只能供一个线程用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;双向链表&quot;&gt;&lt;a href=&quot;#双向链表&quot; class=&quot;headerlink&quot; title=&quot;双向链表&quot;&gt;&lt;/a&gt;双向链表&lt;/h2&gt;&lt;p&gt;双向循环链表和单向链表的区别:&lt;br&gt;1: 双向链表比单向链表多了一个指向前一个节点的指针&lt;br&gt;2: 单向链表的验证结束位
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="c语言" scheme="http://axss.gitee.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>c语言提高5-字符串</title>
    <link href="http://axss.gitee.io/2018/03/12/%E6%8A%80%E6%9C%AF/2015-04-13-c%E8%AF%AD%E8%A8%80%E6%8F%90%E9%AB%985-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://axss.gitee.io/2018/03/12/技术/2015-04-13-c语言提高5-字符串/</id>
    <published>2018-03-12T06:43:46.000Z</published>
    <updated>2018-03-13T02:58:44.815Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串和字符数组sizeof时候的区别"><a href="#字符串和字符数组sizeof时候的区别" class="headerlink" title="字符串和字符数组sizeof时候的区别"></a>字符串和字符数组sizeof时候的区别</h3><p>在直接sizeof(“字符串”) 字符串的时候，我们此时不能把字符串当作指针来判断，需要将其做为字符数组来看，所以sizeof(“china”) 不等于4而是等于6</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串n系列函数跟非n函数比较:防止读写越界，所以里面提供了指定的参数来描述我们需要操作的字符数<br>字符串的查询函数:<br>strchr:在一串字符里面，匹配单个字符，存在返回匹配到的数据的地址，否则返回NULL<br>strstr:在一串字符串里面匹配一串字符，存在则返回匹配到的第一个字符串，否则返回NULL</p><h4 id="字符串操作函数代码事例"><a href="#字符串操作函数代码事例" class="headerlink" title="字符串操作函数代码事例:"></a>字符串操作函数代码事例:</h4><p><a href="字符串操作函数代码.c">字符串操作函数代码</a></p><h3 id="内存操作函数"><a href="#内存操作函数" class="headerlink" title="内存操作函数"></a>内存操作函数</h3><p>特点：只关心读取内容的多少，不关心内容，所以可以过滤掉一些特殊字符<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">memcpy</span> <span class="params">(<span class="keyword">void</span> * dst, <span class="keyword">void</span> <span class="keyword">const</span> * src, <span class="keyword">size_t</span> length)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">memmove</span><span class="params">(<span class="keyword">void</span> * dst, <span class="keyword">void</span> <span class="keyword">const</span> * src, <span class="keyword">size_t</span> length)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">memcmp</span> <span class="params">(<span class="keyword">void</span> <span class="keyword">const</span> * a, <span class="keyword">void</span> <span class="keyword">const</span> * b,<span class="keyword">size_t</span> length)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">memchr</span> <span class="params">(<span class="keyword">void</span> <span class="keyword">const</span> * a, <span class="keyword">int</span> ch, <span class="keyword">size_t</span> length)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">memset</span> <span class="params">(<span class="keyword">void</span> * a, <span class="keyword">int</span> ch ,<span class="keyword">size_t</span> length)</span></span>;</span><br></pre></td></tr></table></figure></p><h4 id="内存操作函数代码例子"><a href="#内存操作函数代码例子" class="headerlink" title="内存操作函数代码例子:"></a>内存操作函数代码例子:</h4><p><a href="内存操作函数代码.c">内存操作函数代码</a></p><h3 id="操作字符指针的思想"><a href="#操作字符指针的思想" class="headerlink" title="操作字符指针的思想"></a>操作字符指针的思想</h3><p>定义两个指针，记录不同的状态值，再根据对应的状态来进行赋值或者其他操作 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;字符串和字符数组sizeof时候的区别&quot;&gt;&lt;a href=&quot;#字符串和字符数组sizeof时候的区别&quot; class=&quot;headerlink&quot; title=&quot;字符串和字符数组sizeof时候的区别&quot;&gt;&lt;/a&gt;字符串和字符数组sizeof时候的区别&lt;/h3&gt;&lt;p&gt;在直
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="c语言" scheme="http://axss.gitee.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>c语言提高4-回调函数,再论指针与数组,基于数组的排序及优化,基于数组的查找及优化,字符串提高</title>
    <link href="http://axss.gitee.io/2018/03/12/%E6%8A%80%E6%9C%AF/2015-04-13-c%E8%AF%AD%E8%A8%80%E6%8F%90%E9%AB%984-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0-%E5%86%8D%E8%AE%BA%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84-%E5%9F%BA%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84%E6%8E%92%E5%BA%8F%E5%8F%8A%E4%BC%98%E5%8C%96-%E5%9F%BA%E4%BA%8E%E6%95%B0%E7%BB%84%E7%9A%84%E6%9F%A5%E6%89%BE%E5%8F%8A%E4%BC%98%E5%8C%96-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8F%90%E9%AB%98/"/>
    <id>http://axss.gitee.io/2018/03/12/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/</id>
    <published>2018-03-12T06:33:04.000Z</published>
    <updated>2018-03-13T02:58:44.813Z</updated>
    
    <content type="html"><![CDATA[<h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>理解:回调函数就是用与调用函数同级的函数作为参数从而来控制被调用方函数的逻辑</p><h3 id="标准库函数qsort"><a href="#标准库函数qsort" class="headerlink" title="标准库函数qsort"></a>标准库函数qsort</h3><p><img src="/2018/03/12/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/标准库函数qsort1.png" alt="标准库函数qsort1"><br><img src="/2018/03/12/技术/2015-04-13-c语言提高4-回调函数-再论指针与数组-基于数组的排序及优化-基于数组的查找及优化-字符串提高/标准库函数qsort2.jpg" alt="标准库函数qsort2"></p><h4 id="qsort代码例子"><a href="#qsort代码例子" class="headerlink" title="qsort代码例子"></a>qsort代码例子</h4><p><a href="qsort代码.c">qsort代码</a></p><h3 id="再论指针与数组"><a href="#再论指针与数组" class="headerlink" title="再论指针与数组"></a>再论指针与数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">8</span>][<span class="number">8</span>]       二维数组</span><br><span class="line"><span class="keyword">int</span> *ptr                 一级指针</span><br><span class="line"><span class="keyword">int</span> * <span class="built_in">array</span>[<span class="number">10</span>]      指针数组</span><br><span class="line"><span class="keyword">int</span> * p[<span class="number">3</span>][<span class="number">4</span>]          指针数组</span><br><span class="line"><span class="keyword">int</span> (*p)[<span class="number">3</span>][<span class="number">4</span>]         数组指针   <span class="keyword">int</span> (*p)[<span class="number">3</span>][<span class="number">4</span>]=&gt; <span class="keyword">int</span> [<span class="number">3</span>][<span class="number">4</span>] * p：所以是个数组指针</span><br><span class="line"><span class="keyword">int</span> (*p[<span class="number">3</span>])[<span class="number">4</span>]         最外层理解：数组指针</span><br><span class="line"><span class="keyword">char</span> * func()         函数</span><br><span class="line"><span class="keyword">char</span> (*func)()        函数指针</span><br><span class="line"><span class="keyword">char</span> (* func[<span class="number">3</span>])()   函数指针数组</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">4</span>]; 等价传递                       foo(arr,<span class="number">4</span>) foo(<span class="keyword">int</span> *p, <span class="keyword">int</span> n)</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">4</span>]; 等价传递                   foo(arr,<span class="number">3</span>) foo(<span class="keyword">int</span>(*p)[<span class="number">4</span>],<span class="keyword">int</span> n)</span><br><span class="line"><span class="keyword">char</span> *argv[<span class="number">3</span>]; 等价传递                 foo(argv,<span class="number">3</span>) foo(<span class="keyword">int</span> ** argv,<span class="keyword">int</span> n)<span class="comment">//注意传过来的是char*类型</span></span><br><span class="line"><span class="keyword">char</span> * p; 等价传递                         foo(p) foo(<span class="keyword">char</span> * p)</span><br><span class="line"><span class="keyword">char</span> * p=<span class="literal">NULL</span>; 初始化传递           foo(&amp;p) foo(<span class="keyword">char</span> **p)</span><br><span class="line"><span class="keyword">char</span> **p 等价传递                         foo(p) foo(<span class="keyword">char</span> **p)</span><br><span class="line"><span class="keyword">char</span> **p =<span class="literal">NULL</span>; 初始化传递         foo(&amp;p) foo(<span class="keyword">char</span> *** p)</span><br><span class="line"><span class="keyword">int</span> (*p)[<span class="number">4</span>]; 等价传递                     foo(p) foo(<span class="keyword">int</span> (*p)[<span class="number">4</span>])　　<span class="comment">//指针数组原先类型就是 int[4]* 所以接收的时候可以直接用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>; 回调传递          foo(func) foo(<span class="keyword">void</span> (*p)(<span class="keyword">int</span>,<span class="keyword">int</span>))</span><br></pre></td></tr></table></figure><h3 id="数组排序优化版"><a href="#数组排序优化版" class="headerlink" title="数组排序优化版"></a>数组排序优化版</h3><p><a href="数组排序优化版.c">数组排序优化版</a></p><h3 id="qsotr实现二级排序-对结构体"><a href="#qsotr实现二级排序-对结构体" class="headerlink" title="qsotr实现二级排序(对结构体)"></a>qsotr实现二级排序(对结构体)</h3><p><a href="qsotr实现二级排序_对结构体.c">qsotr实现二级排序(对结构体)</a></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串常量的本质是一个指针:字符串里面的内容是不能修改的，但是指向字符串的指针变量的是可以修改的<br>例如:char * p=”china”;  p是可以修改指向和内容的，但是p所指向的内容是不能修改的<br>数组名的常量:数组名在本作用域内是不能修改的，但是如果将参数名传递到一个新的函数内是可以进行指针偏移的，只是在申明该数组的时候不能进行偏移</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;回调函数&quot;&gt;&lt;a href=&quot;#回调函数&quot; class=&quot;headerlink&quot; title=&quot;回调函数&quot;&gt;&lt;/a&gt;回调函数&lt;/h3&gt;&lt;p&gt;理解:回调函数就是用与调用函数同级的函数作为参数从而来控制被调用方函数的逻辑&lt;/p&gt;
&lt;h3 id=&quot;标准库函数qsort&quot;
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="c语言" scheme="http://axss.gitee.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>virtualbox中ubuntu和windows共享文件夹设置</title>
    <link href="http://axss.gitee.io/2018/03/09/%E6%8A%80%E6%9C%AF/2018-03-09-virtualbox%E4%B8%ADubuntu%E5%92%8Cwindows%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E8%AE%BE%E7%BD%AE/"/>
    <id>http://axss.gitee.io/2018/03/09/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/</id>
    <published>2018-03-09T12:14:29.000Z</published>
    <updated>2018-03-13T02:58:44.821Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统平台"><a href="#系统平台" class="headerlink" title="系统平台"></a>系统平台</h2><p>系统平台：win8.1、virtualbox4.3.8、ubuntu12.04<br>安装VBoxGuestAdditions_4.3.8.iso增强工具，安装完毕后根据提示重启Ubuntu，具体操作如下：</p><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a>Step 1</h3><p><img src="/2018/03/09/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/1.png"></p><h3 id="Step-2-安装virtualbox增强包"><a href="#Step-2-安装virtualbox增强包" class="headerlink" title="Step 2.安装virtualbox增强包"></a>Step 2.安装virtualbox增强包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">linjiqin@ubuntu:~$ cd ~</span><br><span class="line">linjiqin@ubuntu:~$ su -</span><br><span class="line">密码： </span><br><span class="line">root@ubuntu:~# cd /media/</span><br><span class="line">root@ubuntu:/media# ls</span><br><span class="line">sf_share  VBOXADDITIONS_4.3.8_92456</span><br><span class="line">root@ubuntu:/media# cd VBOXADDITIONS_4.3.8_92456/</span><br><span class="line">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# ls</span><br><span class="line">32Bit        cert                    VBoxSolarisAdditions.pkg</span><br><span class="line">64Bit        OS2                     VBoxWindowsAdditions-amd64.exe</span><br><span class="line">AUTORUN.INF  runasroot.sh            VBoxWindowsAdditions.exe</span><br><span class="line">autorun.sh   VBoxLinuxAdditions.run  VBoxWindowsAdditions-x86.exe</span><br><span class="line">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456# sudo ./VBoxLinuxAdditions.run #安装virtualbox增强包</span><br><span class="line">....</span><br><span class="line">root@ubuntu:/media/VBOXADDITIONS_4.3.8_92456#</span><br></pre></td></tr></table></figure><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a>Step 3</h3><p>先关闭ubuntu，在virtualbox“设置”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加windows中要共享的目录，取一个名。比如我在D盘建一个名为share的文件夹，如下图：<br><img src="/2018/03/09/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/2.png"></p><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a>Step 4</h3><p>重启ubuntu，在ubuntu系统最上端“设备”中找到“共享文件夹”，点击进入，点击右边添加目录按钮，添加第二步操作的共享目录，如下图：<br><img src="/2018/03/09/技术/2018-03-09-virtualbox中ubuntu和windows共享文件夹设置/3.png"></p><h3 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h3><p>进入虚拟Ubuntu，在命令行终端下输入：<br>sudo mkdir /mnt/shared<br>sudo mount -t vboxsf share /mnt/shared<br>其中”share”是之前创建的共享文件夹的名字。OK，现在Ubuntu和主机可以互传文件了。<br>要想自动挂载的话，可以在/etc/fstab中添加一项<br>share /mnt/shared vboxsf rw,gid=100,uid=1000,auto 0 0</p><h3 id="卸载的话使用下面的命令"><a href="#卸载的话使用下面的命令" class="headerlink" title="卸载的话使用下面的命令:"></a>卸载的话使用下面的命令:</h3><p>sudo umount -f /mnt/shared</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a><font color="red">注意</font></h3><p>共享文件夹的名称千万不要和挂载点的名称相同。比如，上面的挂载点是/mnt/shared，如果共享文件夹的名字也是shared的话，在挂载的时候就会出现如下的错误信息：/sbin/mount.vboxsf: mounting failed with the error: Protocol error</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;系统平台&quot;&gt;&lt;a href=&quot;#系统平台&quot; class=&quot;headerlink&quot; title=&quot;系统平台&quot;&gt;&lt;/a&gt;系统平台&lt;/h2&gt;&lt;p&gt;系统平台：win8.1、virtualbox4.3.8、ubuntu12.04&lt;br&gt;安装VBoxGuestAddition
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="http://axss.gitee.io/tags/linux/"/>
    
      <category term="windows" scheme="http://axss.gitee.io/tags/windows/"/>
    
      <category term="虚拟机" scheme="http://axss.gitee.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>c语言提高3-指针加强,const,函数指针,回调函数</title>
    <link href="http://axss.gitee.io/2016/04/12/%E6%8A%80%E6%9C%AF/2015-04-11-c%E8%AF%AD%E8%A8%80%E6%8F%90%E9%AB%983-%E6%8C%87%E9%92%88%E5%8A%A0%E5%BC%BA-const-%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>http://axss.gitee.io/2016/04/12/技术/2015-04-11-c语言提高3-指针加强-const-函数指针-回调函数/</id>
    <published>2016-04-12T06:17:48.000Z</published>
    <updated>2018-03-13T02:58:44.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指针加强"><a href="#指针加强" class="headerlink" title="指针加强"></a>指针加强</h2><p>1：指针在内存中都是线性的，如果变成二维或者多维空间只是我们在上面强加了一层逻辑而已，所以无论几维的空间我们都可以以一维空间的方式来访问；<br>2：二维数组是一种二维空间，但是二维空间不代表就只能是二维数组，只是二维空间具有二维数组的访问形式</p><h3 id="堆上根据二级-三级指针做形参-做返回值来申请二维空间的代码"><a href="#堆上根据二级-三级指针做形参-做返回值来申请二维空间的代码" class="headerlink" title="堆上根据二级,三级指针做形参,做返回值来申请二维空间的代码"></a>堆上根据二级,三级指针做形参,做返回值来申请二维空间的代码</h3><p><a href="堆上根据二级,三级指针做形参,做返回值来申请二维空间.c">堆上根据二级,三级指针做形参,做返回值来申请二维空间</a></p><h3 id="序列加密的代码"><a href="#序列加密的代码" class="headerlink" title="序列加密的代码"></a>序列加密的代码</h3><p><a href="序列加密的代码.c">序列加密的代码</a></p><h3 id="利用二级指针的方式读取文件到堆内存"><a href="#利用二级指针的方式读取文件到堆内存" class="headerlink" title="利用二级指针的方式读取文件到堆内存"></a>利用二级指针的方式读取文件到堆内存</h3><p><a href="利用二级指针的方式读取文件到堆内存.c">利用二级指针的方式读取文件到堆内存</a></p><h2 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h2><p>修饰变量不能被修改<br>在<em>左边: 不能修改指向<br>在</em>右边: 不能修改数据<br>*左右都被const修饰: 数据和指向都不能修改</p><ol><li>const与defined的区别: const有类型的概念，但是defind没有</li><li>const变量定义前必须初始化</li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ol><li>函数名的本质: 指向函数体这段代码段的首地址</li><li>接收函数名的类型: 返回值 （<em>变量名）（形参类型）；我们可以直接把函数声明拿过来然后把函数名替换成(</em>变量名)</li><li>函数指针的申明: 如2直接在变量名加上“[个数]”</li><li>回调函数: 调用一个别的方法然后将自己的一个方法名当参数传过去，这样就能将自己的逻辑加在别人的代码里，从而增强灵活性</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;指针加强&quot;&gt;&lt;a href=&quot;#指针加强&quot; class=&quot;headerlink&quot; title=&quot;指针加强&quot;&gt;&lt;/a&gt;指针加强&lt;/h2&gt;&lt;p&gt;1：指针在内存中都是线性的，如果变成二维或者多维空间只是我们在上面强加了一层逻辑而已，所以无论几维的空间我们都可以以一维空间
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="c语言" scheme="http://axss.gitee.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>c语言提高2-二维数组,隐式类型转化,数组指针,指针数组,二级指针</title>
    <link href="http://axss.gitee.io/2016/04/10/%E6%8A%80%E6%9C%AF/2015-04-10-c%E8%AF%AD%E8%A8%80%E6%8F%90%E9%AB%982-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84-%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E5%8C%96-%E6%95%B0%E7%BB%84%E6%8C%87%E9%92%88-%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84-%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88/"/>
    <id>http://axss.gitee.io/2016/04/10/技术/2015-04-10-c语言提高2-二维数组-隐式类型转化-数组指针-指针数组-二级指针/</id>
    <published>2016-04-10T04:30:13.000Z</published>
    <updated>2018-03-13T02:58:44.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><h3 id="备注1"><a href="#备注1" class="headerlink" title="备注1"></a>备注1</h3><p>强转为int或者char类型则是单纯的数值上的加减，都是每个地址相隔的个数大小，然后每个地址相隔一<br>强转为int*则是地址上的加减，相隔的是每个int的数量</p><h3 id="备注2"><a href="#备注2" class="headerlink" title="备注2"></a>备注2</h3><p>六进制和八进制在字符串中表现的效果：</p><ol><li>8进制：”\0数字数字”：格式是+0后面的八进制数据， 如果说中间出现截断行为（中间出现不是8进制的字符）的话，则后面的都算是单个字符了，注意八进制最多包含0后面两位</li><li>16进制：格式：+x+十六进制数表示一个字节：如果说中间出现截断行为（中间出现不是16进制的字符）的话，则后面的都算是单个字符了</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str1[]=<span class="string">"\0373xei"</span>;<span class="comment">//037算一个字节  后面的依次每个字符算一个字节</span></span><br><span class="line">    <span class="comment">//char str1[]="\0383xei";//03算一个字节 后面的依次每个字符算一个字节</span></span><br><span class="line">    <span class="comment">//char str2[]="\x2aet76543";//x2ae 算一个字节  后面的依次每个字符算一个字节</span></span><br><span class="line">    <span class="keyword">char</span> str2[]=<span class="string">"\x3456aeccaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</span>;<span class="comment">//这里只有一个字节因为全部都是十六进制的数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="built_in">strlen</span>(str1));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="built_in">strlen</span>(str2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型转化-隐式"><a href="#类型转化-隐式" class="headerlink" title="类型转化(隐式)"></a>类型转化(隐式)</h2><p>小类型与大类型所运算或者逻辑时会默认转化为大类型，有符号的与无符号的会默认转化为无符号的<br>作用：防止数据丢失的一种机制<br>备注：数据本身是没有意义的，只要是要看我们是怎样去解释他<br>1：小类型-&gt;大类型：低位对齐<br>2：大类型-&gt;小类型：低位对齐，改变后注意两个类型的数据的符号是否相同，该过程一定会发生截断行为，但是数据是否丢失，不一定<br>3：有符号-&gt;无符号：注意负数转化为对应的无符号数可能对应一个很大的数（该过程中一定要注意类型），比如int类型的-1<br>例子：这里输出a&lt;b 因为无符号和有符号进行数据或者逻辑运算的时候都会转化为无符号数运算，然后-1的无符号数比a大，所以输出<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> a=<span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)<span class="comment">//都会默认转化为无符号数-1的无符号数很大</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a&gt;b"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a&lt;b"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><ol><li>理解二维数组或者一维多维数组的地址加减的方法：全部将数组名理解为一维数组来解决，而加减的个数就是步长（类型）的位数</li><li>二维数组的在逻辑上理解是平面的，但是在内存上的物理存储是线性的，所以我们可以用线性的（一维）的方式来遍历二维数组，只是改变了类型（步长）</li><li>二维数组的传参：行可以少，列不能少</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="二维数组.c">二维数组</a></p><h2 id="数组指针"><a href="#数组指针" class="headerlink" title="数组指针"></a>数组指针</h2><p>指向数组的指针，本质是指针，所以专门用来接收数组的地址<br>1：无论一维还是二维数组名，本质上都是数组指针，只不过是类型不同而已<br>2：指针的运算1：地址的运算其实是计算相隔指定类型的个数2：转化为基本类型则是计算相隔的字节数<br>3：数值指针传参：不管传递几维数组的数组名，我们都可以理解为将该数组的数组指针传递过去<br>4：数组指针型参的推演：int [4] <em> arr (编译不过)=&gt;int </em> arr<a href="指针数组">4</a>=&gt;int (*arr)<a href="数组指针">4</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组指针：定义：本质上都是指针，只不过指向是指向数组</span></span><br><span class="line"><span class="comment">//常见的数组指针：不管是几维数组，他们的数组名本质上都是数组指针：常见错误：一级数组取地址等同于数组指针，不是二级指针</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> (*p)[<span class="number">10</span>] =<span class="built_in">array</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="built_in">array</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><p>数组里面的值都是指针，本质是数组<br>1：备注：我们遍历指针数组的时候常常在数组的末尾加上NULL，用该标识来表示结束<br>2：指针数组的数组名都是二级指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traveseArray</span><span class="params">(<span class="keyword">char</span> ** <span class="built_in">array</span>,<span class="keyword">int</span> n)</span><span class="comment">//array就是一个实参的数据 实参是地址 所以该形参也是地址</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,*(<span class="built_in">array</span>+i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//常见的处理指针数组的方法  在数组的末尾加上NULL作为结束标识</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traveseArray2</span><span class="params">(<span class="keyword">char</span> ** <span class="built_in">array</span>,<span class="keyword">int</span> n)</span><span class="comment">//array就是一个实参的数据 实参是地址 所以该形参也是地址</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">while</span>(*<span class="built_in">array</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,*(<span class="built_in">array</span>++));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> * pArray[] = &#123;<span class="string">"apple"</span>,<span class="string">"pear"</span>,<span class="string">"banana"</span>,<span class="string">"orange"</span>,<span class="string">"pineApple"</span>,<span class="literal">NULL</span>&#125;;</span><br><span class="line">    traveseArray2(&amp;pArray,<span class="number">5</span>);<span class="comment">//指针数组</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二级指针"><a href="#二级指针" class="headerlink" title="二级指针"></a>二级指针</h2><p>指向指针的指针，常用于字符数组<br>1：n级指针可以改变n-1下所有的指针指向和数据<br>2：不管几维数组的指针步长都是4个字节</p><h3 id="代码例子"><a href="#代码例子" class="headerlink" title="代码例子"></a>代码例子</h3><p><a href="二级指针.c">二级指针</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;备注&quot;&gt;&lt;a href=&quot;#备注&quot; class=&quot;headerlink&quot; title=&quot;备注&quot;&gt;&lt;/a&gt;备注&lt;/h2&gt;&lt;h3 id=&quot;备注1&quot;&gt;&lt;a href=&quot;#备注1&quot; class=&quot;headerlink&quot; title=&quot;备注1&quot;&gt;&lt;/a&gt;备注1&lt;/h3&gt;&lt;p
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="c语言" scheme="http://axss.gitee.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>c语言提高1-进程空间,一维数组</title>
    <link href="http://axss.gitee.io/2016/03/24/%E6%8A%80%E6%9C%AF/2018-03-09-c%E8%AF%AD%E8%A8%80%E6%8F%90%E9%AB%981-%E8%BF%9B%E7%A8%8B%E7%A9%BA%E9%97%B4,%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84/"/>
    <id>http://axss.gitee.io/2016/03/24/技术/2018-03-09-c语言提高1-进程空间,一维数组/</id>
    <published>2016-03-24T12:49:16.000Z</published>
    <updated>2018-03-13T02:58:44.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数据类型的作用"><a href="#数据类型的作用" class="headerlink" title="数据类型的作用"></a>数据类型的作用</h3><p>在线性的内存中添加一种逻辑操作</p><h3 id="补码的特点"><a href="#补码的特点" class="headerlink" title="补码的特点"></a>补码的特点</h3><p>正数的补码是他本身<br>负数的补码：该负数对应的正数的补码取反加一<br>一个8位的有符号的数据范围为什么是-128到127：因为补码编码的格式不同导致</p><h3 id="数据在内存中的意义"><a href="#数据在内存中的意义" class="headerlink" title="数据在内存中的意义"></a>数据在内存中的意义</h3><p>数据本身是没有意义的，只是要看我们怎样来解释他</p><h3 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h3><p>小类型遇到大类型需要转化为大类型，位数不够的话会根据原类型的符号位来补位（是0补0，是1补1）<br>整形遇到浮点型需要转化为浮点型<br>有符号和无符号的运算结果是有符号的<br>转化都是低位对低位进行取值（低位对齐）</p><h2 id="进程空间"><a href="#进程空间" class="headerlink" title="进程空间"></a>进程空间</h2><h3 id="虚拟空间"><a href="#虚拟空间" class="headerlink" title="虚拟空间"></a>虚拟空间</h3><p>虚拟内存不是我们生活上指的内存条，而是我们通过他来映射到物理内存的一套机制；<br>虚拟内存的好处：早先的电脑是直接将我们运行的程序加载到物理内存中，所以会造成不同的程序直接可以相互调用的后果（很不安全），但是有了这套机制之后，就没有这个缺点了</p><h3 id="变量的存放区域总结"><a href="#变量的存放区域总结" class="headerlink" title="变量的存放区域总结"></a>变量的存放区域总结</h3><p>只要是未初始化的全局或者是静态变量全部储存在data段的未初始化数据段(bss)，默认初始化为0<br>auto的局部变量名无论初始化或者未初始化都储存在栈空间<br>所有的常量都是存储在data区域的只读区域<br>text是储存二进制文件（运行程序）(.exe/.out)的地方</p><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p><img src="/2016/03/24/技术/2018-03-09-c语言提高1-进程空间,一维数组/1.jpg" alt="进程空间"></p><h2 id="数组以及练习"><a href="#数组以及练习" class="headerlink" title="数组以及练习"></a>数组以及练习</h2><p><a href="1.c">点击查看代码</a></p><p><font color="red">注意:</font>地址的加减其实是加减地址所指向空间的数量，只有&amp;+数组名才是操作数组的整体</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;h3 id=&quot;数据类型的作用&quot;&gt;&lt;a href=&quot;#数据类型的作用&quot; class=&quot;headerlink&quot; title=&quot;数据类
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="c语言" scheme="http://axss.gitee.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>c语言16-条件编译</title>
    <link href="http://axss.gitee.io/2015/03/30/%E6%8A%80%E6%9C%AF/2015-03-09-c%E8%AF%AD%E8%A8%8016-%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91/"/>
    <id>http://axss.gitee.io/2015/03/30/技术/2015-03-09-c语言16-条件编译/</id>
    <published>2015-03-30T03:34:12.000Z</published>
    <updated>2018-03-13T02:58:44.802Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p>预处理-&gt;预编译-&gt;汇编-&gt;链接</p><h3 id="宏-define"><a href="#宏-define" class="headerlink" title="宏(define)"></a>宏(define)</h3><ol><li>宏的后面不用”；”符号，宏只是起的替换的作用，在预处理阶段完成（typedef是在链接的时候完成的）</li><li>我们常用比较短并且比较常用的的删除进行宏化，这样嵌入到代码中，减少调用的开销，但是代价就是编译出来的文件会非常大（因为文件中出现了比较多的重复的代码）</li><li>#: 利用宏来创建字符串（可以达到将其他类型数据嵌入到字符串中）</li><li>##: 预处理的粘合剂</li><li>预定义宏: 常用语打印日志<br><strong>DATE</strong> 进行预处理的日期（“MMmm dd yyyy”形式的字符串文字）<br><strong>FILE</strong> 代表当前源代码文件名的字符串文字<br><strong>LINE</strong> 代表当前源代码中的行号的整数常量<br><strong>TIME</strong> 源文件编译时间，格式“hh: mm: ss”<br><strong>func</strong> 当前所在函数名<br>在打印调试信息时打印这两<br>个宏 <strong>FILE</strong> <strong>LINE</strong> 可以给开发者非常有用的提示 </li></ol><h3 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h3><p>单路: #if #endif<br>双路: #if #else #endif<br>多路: #if #elif #elif #endif</p><h3 id="头文件包含"><a href="#头文件包含" class="headerlink" title="头文件包含"></a>头文件包含</h3><p>1: 头文件的内容会被写入到包含该头文件的文件中<br>2: &lt;&gt;（一般用于系统文件）: 系统路径下面找  whereis stdio.h<br>3: “”（一般用于自定义头文件）: 现在当前路径下找 ，找不到再去系统路径下找<br>4: 头文件自包含: 免去多余的前向申明<br>5: 避免头文件被重复包含: #ifndef <strong>XX_H</strong> #define <strong>XX_H</strong> //数据类型声明 //函数声明#endif （假设文件名为xx.h）<br>6: c语言是以文件单位进行编译的，编译期只需要函数申明即可，所以我们在给别人接口时候，先给.h（函数的申明文件即可），到时再把.o文件给他进行链接即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编译过程&quot;&gt;&lt;a href=&quot;#编译过程&quot; class=&quot;headerlink&quot; title=&quot;编译过程&quot;&gt;&lt;/a&gt;编译过程&lt;/h3&gt;&lt;p&gt;预处理-&amp;gt;预编译-&amp;gt;汇编-&amp;gt;链接&lt;/p&gt;
&lt;h3 id=&quot;宏-define&quot;&gt;&lt;a href=&quot;#宏-de
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="c语言" scheme="http://axss.gitee.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>c语言15-位操作</title>
    <link href="http://axss.gitee.io/2015/03/26/%E6%8A%80%E6%9C%AF/2015-03-09-c%E8%AF%AD%E8%A8%8015-%E4%BD%8D%E6%93%8D%E4%BD%9C/"/>
    <id>http://axss.gitee.io/2015/03/26/技术/2015-03-09-c语言15-位操作/</id>
    <published>2015-03-26T03:34:12.000Z</published>
    <updated>2018-03-13T02:58:44.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h2><p>&amp;（清零运算符）：结论：同1与数据不变，同0与清零<br>|（置一运算符）：结论：跟0位或保持不变，与1位或置一<br>^（异或运算符）：结论：对应位相同时清零，不同时置一</p><h3 id="掩码-mask"><a href="#掩码-mask" class="headerlink" title="掩码(mask)"></a>掩码(mask)</h3><p>掩码是位操作很重要的一部分，我们可以根据掩码来操作二进制字符里的每一位<br>掩码的功能：1：打开位（置一：flag|mask）；2：关闭位（清零：flag&amp;(~mask)）；3：转置位（位转反：flag^=mask）;4：查看某一位的值</p><h3 id="移位"><a href="#移位" class="headerlink" title="移位"></a>移位</h3><p>左移：低位补零，高位溢出<br>右移：对于有符号和无符号的正整数来说，高位补零，低位溢出；但是对于有符号的负数来说，取决于系统，补零的为“逻辑右移动”，补一的为“算术右移”</p><h3 id="二进制文件的加密和解密"><a href="#二进制文件的加密和解密" class="headerlink" title="二进制文件的加密和解密"></a>二进制文件的加密和解密</h3><ol><li>特点: 不会溢出</li><li>步骤: 根据fread读取文件的每一个字符，然后对每位进行移位操作，然后fwrite写一个新的文件，解密也是如此<br>代码事例:<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span><span class="params">(<span class="keyword">char</span> * ch1,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">unsigned</span> <span class="keyword">char</span> ch=ch1[i];</span><br><span class="line">         ch=ch&lt;&lt;<span class="number">1</span>|ch&gt;&gt;<span class="number">7</span>;<span class="comment">//char  八位</span></span><br><span class="line">         ch1[i]=ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">(<span class="keyword">char</span> * ch1,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="keyword">unsigned</span> <span class="keyword">char</span> ch=ch1[i];</span><br><span class="line">         ch=ch&gt;&gt;<span class="number">1</span>|ch&lt;&lt;<span class="number">7</span>;<span class="comment">//char  八位</span></span><br><span class="line">         ch1[i]=ch;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二进制加密文件</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * fpr=fopen(<span class="string">"2.wmv"</span>,<span class="string">"rb+"</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==fpr)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    FILE * fpw=fopen(<span class="string">"3.wmv"</span>,<span class="string">"wb+"</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>==fpw)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>;<span class="comment">//read 返回fread读取的数据的长度</span></span><br><span class="line">    <span class="keyword">while</span>(num=fread((<span class="keyword">void</span>*)buff,<span class="keyword">sizeof</span>(<span class="keyword">char</span>),<span class="number">1</span>,fpr)&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        decode(buff,num);</span><br><span class="line">        fwrite((<span class="keyword">void</span>*)buff,num,<span class="number">1</span>,fpw);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fpr);</span><br><span class="line">    fclose(fpw);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>###总结<br>关于位操作的问题都是需要先求出掩码，然后再根据情况将数据对掩码进行位逻辑运算符操作</p><h3 id="将十进制转化为二进制数的方法"><a href="#将十进制转化为二进制数的方法" class="headerlink" title="将十进制转化为二进制数的方法"></a>将十进制转化为二进制数的方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">binDis</span><span class="params">(intnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">inti=<span class="number">32</span>;</span><br><span class="line"><span class="keyword">while</span>(i--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(num&amp;<span class="number">1</span>&lt;&lt;i)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">8</span>==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'\n'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例题：</span></span><br><span class="line"><span class="comment">//循环移位</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">circulation</span><span class="params">(<span class="keyword">int</span>*num,intn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证是整数还是负数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m=n&gt;<span class="number">0</span>?n:-n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> mask=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">    mask|=(<span class="number">1</span>&lt;&lt;m);</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//做这类题目可以先拿移动一位和10000001来做测试</span></span><br><span class="line">        *num=(*num&lt;&lt;n)|((*num&gt;&gt;(<span class="keyword">sizeof</span>(*num)*<span class="number">8</span>-n))&amp;mask);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//首先右移根据掩码求出数据右移需要清零</span></span><br><span class="line">        *num=(*num&gt;&gt;(-n))&amp;(~(mask&lt;&lt;<span class="keyword">sizeof</span>(*num)*<span class="number">8</span>-(-n)))|(*num&lt;&lt;<span class="keyword">sizeof</span>(*num)*<span class="number">8</span>-(-n));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//题目： 从键盘上输入 1 个正整数给 int 变量 num， 输出由 3～ 6 位构成的数（ 从</span></span><br><span class="line">低 <span class="number">0</span> 号开始编号）</span><br><span class="line">基本思路：</span><br><span class="line"><span class="number">1.</span>截取 <span class="number">3</span>~<span class="number">6</span> 位的数， 位移到 <span class="number">0</span>~<span class="number">3</span> 位</span><br><span class="line">a)构建 <span class="number">3</span>~<span class="number">6</span> 位上为 <span class="number">1</span> 其余为 <span class="number">0</span> 的数</span><br><span class="line">b)位与输入数</span><br><span class="line">c)得到的结果右移 <span class="number">3</span> 位</span><br><span class="line"><span class="number">2.</span>先将 <span class="number">3</span>~<span class="number">6</span> 位移到 <span class="number">0</span>~<span class="number">3</span> 位， 截取 <span class="number">0</span>~<span class="number">3</span> 位</span><br><span class="line">a)输入数右移 <span class="number">3</span> 位</span><br><span class="line">b)构建 <span class="number">0</span>~<span class="number">3</span> 位为 <span class="number">1</span> 其余为 <span class="number">0</span> 的数</span><br><span class="line">c)位与， 得到结果</span><br><span class="line"><span class="number">1</span>： </span><br><span class="line"><span class="keyword">int</span> data=<span class="number">0xaa55</span>;</span><br><span class="line"><span class="comment">//求出掩码 </span></span><br><span class="line"><span class="keyword">int</span> mask=<span class="number">1</span>&lt;&lt;<span class="number">7</span>|<span class="number">1</span>&lt;&lt;<span class="number">6</span>|<span class="number">1</span>&lt;&lt;<span class="number">5</span>|<span class="number">1</span>&lt;&lt;<span class="number">4</span>;</span><br><span class="line"><span class="comment">//让掩码跟数据进行位操作，需要保证我们需要的数据不变</span></span><br><span class="line">data &amp; =mask; </span><br><span class="line"><span class="comment">//将数据移动到最低位，得到结果</span></span><br><span class="line">data&gt;&gt;=<span class="number">3</span>;  </span><br><span class="line"><span class="number">2</span>：</span><br><span class="line"><span class="keyword">int</span> data=<span class="number">0xaa55</span>;</span><br><span class="line"></span><br><span class="line">data&gt;&gt;=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mask=<span class="number">0xf</span>;  </span><br><span class="line"></span><br><span class="line">data&amp;=mask;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;位操作&quot;&gt;&lt;a href=&quot;#位操作&quot; class=&quot;headerlink&quot; title=&quot;位操作&quot;&gt;&lt;/a&gt;位操作&lt;/h2&gt;&lt;p&gt;&amp;amp;（清零运算符）：结论：同1与数据不变，同0与清零&lt;br&gt;|（置一运算符）：结论：跟0位或保持不变，与1位或置一&lt;br&gt;^（
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="c语言" scheme="http://axss.gitee.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>c语言14-文件操作</title>
    <link href="http://axss.gitee.io/2015/03/25/%E6%8A%80%E6%9C%AF/2015-03-09-c%E8%AF%AD%E8%A8%8014-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://axss.gitee.io/2015/03/25/技术/2015-03-09-c语言14-文件操作/</id>
    <published>2015-03-25T03:34:12.000Z</published>
    <updated>2018-03-13T02:58:44.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="文本文件操作"><a href="#文本文件操作" class="headerlink" title="文本文件操作"></a>文本文件操作</h3><p>储存在内存中的都是二进制文件（我们正常输入的数据都是以文本方式储存在内存中的）<br>读取. 将内存中的二进制转化为ascii码，然后将ascii码转化为对应的字符显示<br>写入. 首先将指定的字符转化为ascii码，然后将ascii码转化为2进制储存在内存中</p><h3 id="文件字符读取的置位"><a href="#文件字符读取的置位" class="headerlink" title="文件字符读取的置位"></a>文件字符读取的置位</h3><p>都是先读取完再置位的</p><h3 id="feof"><a href="#feof" class="headerlink" title="feof"></a>feof</h3><p>feof是先判断标志位是否置位，如果没有置位则继续读，而字符的置位需要先读取才能置位，所以我们使用feof就需要先读取再判断</p><h3 id="二进制文件操作"><a href="#二进制文件操作" class="headerlink" title="二进制文件操作"></a>二进制文件操作</h3><p>读取到的文件都是二进制，写入到内存的数据也是一二进制的方式存储在内存中，所以该效率最快</p><h3 id="出现乱码的原因"><a href="#出现乱码的原因" class="headerlink" title="出现乱码的原因"></a>出现乱码的原因</h3><p>由于编码和解码的格式不同，比如如果我们一开始的文本文件以ascii码的编码格式存入到内存中，然后我们再以解析二进制的格式来解析，就会造成乱码</p><h3 id="文件的操作流程"><a href="#文件的操作流程" class="headerlink" title="文件的操作流程"></a>文件的操作流程</h3><p>硬盘-&gt;开辟一定大小内存的缓存区域-&gt;创建用来描述缓存区域的结构体-&gt;返回结构体指针（根据文件结构体体指针来对文件进行读写操作）</p><h3 id="文件三种读取方法代码例子"><a href="#文件三种读取方法代码例子" class="headerlink" title="文件三种读取方法代码例子"></a>文件三种读取方法代码例子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myfgetc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//单字符</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      1:先赋值再读取  因为文件的置位是先读才会置位的（表示已经读取完了），而feof是根据标志位是否置位的，所以我们需要先读才能用feof来判断是否读取完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">    FILE * fp=fopen(<span class="string">"1.txt"</span>,<span class="string">"r+"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!fp)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">char</span> buff;</span><br><span class="line">    <span class="comment">//错误的读取方法  会造成多读一个的效果</span></span><br><span class="line">    <span class="comment">//    while(!feof(fp))//fgetc和fgets都是返回</span></span><br><span class="line">    <span class="comment">//    &#123;</span></span><br><span class="line">    <span class="comment">//    buff=fgetc(fp);</span></span><br><span class="line">    <span class="comment">//        printf("%c",buff);</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 第一种验证结束的方法</span></span><br><span class="line">    <span class="comment">//    while((buff=fgetc(fp))&amp;&amp;!feof(fp))//fgetc和fgets都是返回</span></span><br><span class="line">    <span class="comment">//    &#123;</span></span><br><span class="line">    <span class="comment">//        printf("%c",buff);</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2:第二种验证结束的方法</span></span><br><span class="line">    <span class="comment">//    while((buff=fgetc(fp))!=EOF)//fgetc和fgets都是返回</span></span><br><span class="line">    <span class="comment">//    &#123;</span></span><br><span class="line">    <span class="comment">//        printf("%c",buff);</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myfgets</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * fp=fopen(<span class="string">"1.txt"</span>,<span class="string">"r+"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!fp)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span>(fgets(buff,<span class="number">1024</span>,fp)!=<span class="literal">NULL</span>) <span class="comment">//判断结束条件是否为null  遇到'\0'</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>,buff);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myfread</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FILE * fp=fopen(<span class="string">"1.txt"</span>,<span class="string">"r+"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!fp)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">while</span>(fread((<span class="keyword">void</span>*)buff,<span class="number">1</span>,<span class="number">1</span>,fp)&gt;<span class="number">0</span>) <span class="comment">//注意每次读取的字节数量必须是最小单元，不然如果某次读取的时候没有读满会返回0 也就说明会少打印</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>,buff);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取文件的判断"><a href="#读取文件的判断" class="headerlink" title="读取文件的判断"></a>读取文件的判断</h3><ol><li>单字符. 读到文件尾时，返回EOF表示结束 ，也可以借用feof来验证</li><li>单行读. 遇到\n结束一次读取  </li></ol><h4 id="文本文件的读取和写入方法"><a href="#文本文件的读取和写入方法" class="headerlink" title="文本文件的读取和写入方法"></a>文本文件的读取和写入方法</h4><p><img src="/2015/03/25/技术/2015-03-09-c语言14-文件操作/fopen.jpg" alt="fopen"></p><p><img src="/2015/03/25/技术/2015-03-09-c语言14-文件操作/fclose.jpg" alt="fclose"></p><p>rewind: 每次我们写入的时候都会将文件指针移动到写入的最后，但是当我们需要读取文件内容的时候需要重头开始读，所以需要重置文件指针<br><img src="/2015/03/25/技术/2015-03-09-c语言14-文件操作/rewind.jpg" alt="rewind"></p><p>fputc: 单个字符写入<br><img src="/2015/03/25/技术/2015-03-09-c语言14-文件操作/fputc.jpg" alt="fputc"></p><p>fgetc: 单个字符读取，根据eof进行判断是否结束<br><img src="/2015/03/25/技术/2015-03-09-c语言14-文件操作/fgetc.jpg" alt="fgetc"></p><p>fputs: 多个字符写入<br><img src="/2015/03/25/技术/2015-03-09-c语言14-文件操作/fputs.jpg" alt="fputs"></p><p>fgets: 多个字符读取，至多读取n-1个字符，最后一个会是’\0’<br><img src="/2015/03/25/技术/2015-03-09-c语言14-文件操作/fgets.jpg" alt="fgets"></p><p>feof: 是去读标志位判断文件是否结束的，每验证完一次标志位都会加加</p><p><img src="/2015/03/25/技术/2015-03-09-c语言14-文件操作/fseek.jpg" alt="fseek"></p><p><img src="/2015/03/25/技术/2015-03-09-c语言14-文件操作/ftell.jpg" alt="ftell"></p><p>二进制文件的读取和写入: 因为二进制的文件的读取和写入是完全操控二进制的，所以不受影响读取文本文件的字符的影响，所以我们常用该种方法来操作结构体的数据读取和写入</p><p><img src="/2015/03/25/技术/2015-03-09-c语言14-文件操作/freadAndfwrite.jpg" alt="freadAndfwrite"></p><h3 id="文件操作总结"><a href="#文件操作总结" class="headerlink" title="文件操作总结"></a>文件操作总结</h3><ol><li>我们确定是否是最后的最后的节点的时候需要先获取到才能判断，所以我们需要先读，再判断，跟链表相反，链表是直接判断当前节点，而文件是先获取到数据再判断</li><li><p>linux总是会给我们创建的文本文件默认在末尾加上\n</p></li><li><p>切记每次操作完文件后，都要释放缓存</p></li><li><p>清除缓存的方法  fclose \n  fflush(跨平台性不好)</p></li><li><p>fgets和scanf的比较，fgets的安全性比scanf好  fgets的三个参数  stdin  stdout  stdeorr，fgets遇到’\n’才结束，所以如果最后一行没有\n的话会少读一行，并且gets至多只能读n-1个字符，因为最后一个空间要自动补\0</p></li><li><p>linux的换行字符是直接\n windows是\r\n 存在平台差异性</p></li><li><p>二进制文件的读取操作对影响文本文件的读取操作的字符免疫（’\0’，’\n’，’\r\n’）</p></li><li><p>操作结构体的数据到文件中，我们用二进制操作会很灵活</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件操作&quot;&gt;&lt;a href=&quot;#文件操作&quot; class=&quot;headerlink&quot; title=&quot;文件操作&quot;&gt;&lt;/a&gt;文件操作&lt;/h2&gt;&lt;h3 id=&quot;文本文件操作&quot;&gt;&lt;a href=&quot;#文本文件操作&quot; class=&quot;headerlink&quot; title=&quot;文本文件操
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="c语言" scheme="http://axss.gitee.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>c语言13-链表</title>
    <link href="http://axss.gitee.io/2015/03/24/%E6%8A%80%E6%9C%AF/2015-03-09-c%E8%AF%AD%E8%A8%8013-%E9%93%BE%E8%A1%A8/"/>
    <id>http://axss.gitee.io/2015/03/24/技术/2015-03-09-c语言13-链表/</id>
    <published>2015-03-24T12:49:16.000Z</published>
    <updated>2018-03-13T02:58:44.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表的总结"><a href="#链表的总结" class="headerlink" title="链表的总结"></a>链表的总结</h2><ol><li>链表由多个结构组成，每个结构都必须要有一个指向一个和自身大小相同的指针</li><li>做链表类型的题目我们需要灵活的保存临时变量来保存指针位置</li><li>链表的指针交换的效率一般来讲总是比直接值交换的效率高</li></ol><p>头插法和尾插法:头插法的效率比尾插法效率高，因为尾插法的首先需要定位到最后 </p><p>判断节点是否是最后一个节点:是判断head.next 是否为空 不是判断head</p><h2 id="链表的增删查改代码"><a href="#链表的增删查改代码" class="headerlink" title="链表的增删查改代码"></a>链表的增删查改代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line"><span class="function">Node * <span class="title">createHeadNode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        Node * head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        Node* cur = <span class="literal">NULL</span>;</span><br><span class="line">        head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入您要新增的数据！\n"</span>);</span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data);</span><br><span class="line">        <span class="keyword">while</span> (data)</span><br><span class="line">        &#123;</span><br><span class="line">                cur = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">                cur-&gt;data = data;</span><br><span class="line">                cur-&gt;next = head-&gt;next;<span class="comment">//头插法，先为新申请的链表加上地址</span></span><br><span class="line">                head-&gt;next = cur;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新增  尾插入   保存头结点不变</span></span><br><span class="line"><span class="function">Node * <span class="title">createTallNode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        Node * head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        Node * pro = <span class="literal">NULL</span>;</span><br><span class="line">        Node* cur = <span class="literal">NULL</span>;</span><br><span class="line">        head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        pro = head;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入您要新增的数据！\n"</span>);</span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data);</span><br><span class="line">        <span class="keyword">while</span> (data)</span><br><span class="line">        &#123;</span><br><span class="line">                cur = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">                cur-&gt;data = data;</span><br><span class="line">                cur-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">                pro-&gt;next = cur;</span><br><span class="line">                pro = cur;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询  获取到链表的长度  不加头结点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLen</span><span class="params">(Node * head)</span><span class="comment">//传进来的是</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (head)<span class="comment">//直接接从第第一个开始遍历</span></span><br><span class="line">        &#123;</span><br><span class="line">                i++;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询  根据输入的数据返回查找到的指针</span></span><br><span class="line"><span class="function">Node * <span class="title">searchNode</span><span class="params">(Node * head, <span class="keyword">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (head)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">if</span> (head-&gt;data == data)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除1 根据指针进行删除数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delNode</span><span class="params">(Node * head, Node * delpointer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//    while(head-&gt;next!=findPointer)</span></span><br><span class="line">        <span class="comment">//        head=head-&gt;next;</span></span><br><span class="line">        <span class="comment">//    head-&gt;next=findPointer-&gt;next;</span></span><br><span class="line">        <span class="comment">//    free(findPointer);</span></span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">while</span> (head-&gt;next != delpointer)<span class="comment">//一直遍历 获取到下一个节点是符合数据的指针</span></span><br><span class="line">        &#123;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        head-&gt;next = delpointer-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(delpointer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序 选择排序  数据jiaohuan交换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xzSort</span><span class="params">(Node * head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = getLen(head);</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                Node * temp = head;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;len; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="comment">//将链表的外层循环跟里面所有的元素比较</span></span><br><span class="line">                        <span class="keyword">if</span> (temp-&gt;data&gt;temp-&gt;next-&gt;data)</span><br><span class="line">                        &#123;</span><br><span class="line">                                temp-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class="line">                                temp-&gt;next-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class="line">                                temp-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class="line">                        &#125;</span><br><span class="line">                        temp = temp-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序 选择排序  地址交换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xzSort1</span><span class="params">(Node * head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = getLen(head);</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        Node * oldTemp1 = head;</span><br><span class="line">        Node * oldTemp2 = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                Node * temp = head;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;len; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                        Node * temp2 = head;</span><br><span class="line">                        <span class="keyword">if</span> (temp-&gt;data&gt;temp2-&gt;data)</span><br><span class="line">                        &#123;</span><br><span class="line">                                <span class="comment">//如果满足条件的话  将两个节点的指针进行交换  首先我们需要获取到两个指针的前一个节点和后一个节点</span></span><br><span class="line">                                <span class="keyword">while</span> (oldTemp1-&gt;next != temp)</span><br><span class="line">                                        oldTemp1 = oldTemp1-&gt;next;</span><br><span class="line">                                <span class="keyword">while</span> (oldTemp2-&gt;next != temp2)</span><br><span class="line">                                        oldTemp2 = oldTemp2-&gt;next;</span><br><span class="line"></span><br><span class="line">                                Node * newTemp1 = temp-&gt;next;</span><br><span class="line">                                Node * newTemp2 = temp2-&gt;next;</span><br><span class="line">                                oldTemp1-&gt;next = temp2;</span><br><span class="line">                                temp2-&gt;next = newTemp1;</span><br><span class="line">                                oldTemp2-&gt;next = temp;</span><br><span class="line">                                temp-&gt;next = newTemp2;</span><br><span class="line">                        &#125;</span><br><span class="line">                        temp2 = temp2-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                temp = temp-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序  冒泡排序  数据交换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mpSort</span><span class="params">(Node * head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = getLen(head);</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                Node * temp = head;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;len - i - <span class="number">1</span>; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="comment">//将链表的外层循环跟里面所有的元素比较</span></span><br><span class="line">                        <span class="keyword">if</span> (temp-&gt;data&gt;temp-&gt;next-&gt;data)</span><br><span class="line">                        &#123;</span><br><span class="line">                                temp-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class="line">                                temp-&gt;next-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class="line">                                temp-&gt;data = temp-&gt;data^temp-&gt;next-&gt;data;</span><br><span class="line">                        &#125;</span><br><span class="line">                        temp = temp-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序  冒泡排序  地址交换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mpSort2</span><span class="params">(Node * head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        Node *  sh = <span class="literal">NULL</span>;</span><br><span class="line">        Node * p = <span class="literal">NULL</span>;</span><br><span class="line">        Node * q = <span class="literal">NULL</span>;</span><br><span class="line">        Node *t = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">int</span> len = getLen(head) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//    head=head-&gt;next;//这里不能直接取下一个节点 因为我们获取到的长度就不包含头结点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="comment">//初始化sh p q 因为冒泡排序都是从0开始排序的</span></span><br><span class="line">                sh = head;</span><br><span class="line">                p = sh-&gt;next;</span><br><span class="line">                q = p-&gt;next;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;len - i - <span class="number">1</span>; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="keyword">if</span> (p-&gt;data &gt; q-&gt;data)</span><br><span class="line">                        &#123;</span><br><span class="line">                                sh-&gt;next = q-&gt;next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        sh = sh-&gt;next;</span><br><span class="line">                        p = p-&gt;next;</span><br><span class="line">                        q = q-&gt;next;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">listAll</span><span class="params">(Node * head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        head = head-&gt;next;<span class="comment">//头结点不保存数据</span></span><br><span class="line">        <span class="keyword">while</span> (head)<span class="comment">//没有多加</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, head-&gt;data);</span><br><span class="line">                head = head-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myfree</span><span class="params">(Node * head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        Node * temp=<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> (head)<span class="comment">//没有多加</span></span><br><span class="line">        &#123;</span><br><span class="line">                temp = head-&gt;next;</span><br><span class="line">                <span class="built_in">free</span>(head);</span><br><span class="line">                head = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"新增----------------\n"</span>);</span><br><span class="line">        Node * head = createTallNode();<span class="comment">//返回的节点是头结点  不是头指针</span></span><br><span class="line">        <span class="comment">//mpSort2(head);</span></span><br><span class="line">        listAll(head);</span><br><span class="line">        myfree(head);</span><br><span class="line">        system(<span class="string">"pause"</span>);</span><br><span class="line">        <span class="comment">//    printf("删除----------------\n");</span></span><br><span class="line">        <span class="comment">//    printf("请输入您要查找的数据！\n");</span></span><br><span class="line">        <span class="comment">//    fflush(stdin);</span></span><br><span class="line">        <span class="comment">//    int data;</span></span><br><span class="line">        <span class="comment">//    scanf("%d",&amp;data);</span></span><br><span class="line">        <span class="comment">//    Node  *  temp =   searchNode(head,data);</span></span><br><span class="line">        <span class="comment">//    delNode(head,temp);//返回的节点是头结点  不是头指针</span></span><br><span class="line">        <span class="comment">//    listAll(head);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;链表的总结&quot;&gt;&lt;a href=&quot;#链表的总结&quot; class=&quot;headerlink&quot; title=&quot;链表的总结&quot;&gt;&lt;/a&gt;链表的总结&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;链表由多个结构组成，每个结构都必须要有一个指向一个和自身大小相同的指针&lt;/li&gt;
&lt;li&gt;做链表类型的题
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="c语言" scheme="http://axss.gitee.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>c语言12-共同体,枚举</title>
    <link href="http://axss.gitee.io/2015/03/23/%E6%8A%80%E6%9C%AF/2018-03-09-c%E8%AF%AD%E8%A8%8012-%E5%85%B1%E5%90%8C%E4%BD%93,%E6%9E%9A%E4%B8%BE/"/>
    <id>http://axss.gitee.io/2015/03/23/技术/2018-03-09-c语言12-共同体,枚举/</id>
    <published>2015-03-23T12:49:16.000Z</published>
    <updated>2018-03-13T02:58:44.818Z</updated>
    
    <content type="html"><![CDATA[<h2 id="公用体-union"><a href="#公用体-union" class="headerlink" title="公用体(union)"></a>公用体(union)</h2><ol><li>共用体的申明和结构体一样，</li><li>公用体可以嵌套到结构体中，达到一列可以表示不同类型的结果</li><li>公用体的大小，由最大的成员空间构成</li><li>公用体每一个成员都共同拥有一个首地址，只是因为寻址能力的不同而取到的数据不同，小类型都从低位开始获取数据<br>小端序.就是（栈空间）低位存的是后申请的数据，我们的电脑一般都是小端序<br>大端序.则是低位存的是先申请的数据<br>验证大小端序方法.</li></ol><h3 id="验证大小端序的两种方法"><a href="#验证大小端序的两种方法" class="headerlink" title="验证大小端序的两种方法"></a>验证大小端序的两种方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> utest</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> num2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">union</span> utest;</span><br><span class="line">t.num = <span class="number">0x12345678</span>;<span class="comment">//储存在栈空间因为栈空间是先申请的在高位（自上向下）  </span></span><br><span class="line"><span class="comment">//printf("%x\n",t.num2);//系统帮忙省略了0x</span></span><br><span class="line"><span class="keyword">if</span> (t.num2 == <span class="number">0x78</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"小端序！\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"大端序！\n"</span>);</span><br><span class="line">return0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> data=<span class="number">0x12345678</span>;</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">char</span>)data==<span class="number">0x78</span>)<span class="comment">//if(*(char*)(&amp;data))//先获取到data的地址，然后将int*转换成char*，所以取到最后一个字节的空间地址，再取出*</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"小端序"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"大端序"</span>);</span><br></pre></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举是一个整形的常量集合，给前面的一个变量赋值一个数值，后面的变量会逐一加一</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;公用体-union&quot;&gt;&lt;a href=&quot;#公用体-union&quot; class=&quot;headerlink&quot; title=&quot;公用体(union)&quot;&gt;&lt;/a&gt;公用体(union)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;共用体的申明和结构体一样，&lt;/li&gt;
&lt;li&gt;公用体可以嵌套到结构体
      
    
    </summary>
    
      <category term="技术" scheme="http://axss.gitee.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="c语言" scheme="http://axss.gitee.io/tags/c%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
